// Code generated by protoc-gen-gogo.
// source: model.proto
// DO NOT EDIT!

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		University
		Subject
		Course
		Section
		Meeting
		Instructor
		Book
		Metadata
		Registration
		ResolvedSemester
		Semester
		UCTNotification
		Response
		Meta
		Data
*/
package model

import "github.com/gogo/protobuf/proto"
import "fmt"
import "math"

import "bytes"

import "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import "sort"
import "strconv"
import "reflect"

import "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type University struct {
	Id                 int64             `protobuf:"varint,1,opt,name=id" json:"id" db:"id"`
	Name               string            `protobuf:"bytes,2,opt,name=name" json:"name" db:"name"`
	Abbr               string            `protobuf:"bytes,3,opt,name=abbr" json:"abbr" db:"abbr"`
	HomePage           string            `protobuf:"bytes,4,opt,name=home_page" json:"home_page" db:"home_page"`
	RegistrationPage   string            `protobuf:"bytes,5,opt,name=registration_page" json:"registration_page" db:"registration_page"`
	MainColor          string            `protobuf:"bytes,6,opt,name=main_color" json:"main_color" db:"main_color"`
	AccentColor        string            `protobuf:"bytes,7,opt,name=accent_color" json:"accent_color" db:"accent_color"`
	TopicName          string            `protobuf:"bytes,8,opt,name=topic_name" json:"topic_name" db:"topic_name"`
	TopicId            string            `protobuf:"bytes,9,opt,name=topic_id" json:"topic_id" db:"topic_id"`
	ResolvedSemesters  *ResolvedSemester `protobuf:"bytes,10,opt,name=resolved_semesters" json:"resolved_semesters,omitempty"`
	Subjects           []*Subject        `protobuf:"bytes,11,rep,name=subjects" json:"subjects,omitempty"`
	AvailableSemesters []*Semester       `protobuf:"bytes,12,rep,name=available_semesters" json:"available_semesters,omitempty"`
	Registrations      []*Registration   `protobuf:"bytes,13,rep,name=registrations" json:"registrations,omitempty"`
	Metadata           []*Metadata       `protobuf:"bytes,14,rep,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized   []byte            `json:"-"`
}

func (m *University) Reset()                    { *m = University{} }
func (*University) ProtoMessage()               {}
func (*University) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *University) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *University) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *University) GetAbbr() string {
	if m != nil {
		return m.Abbr
	}
	return ""
}

func (m *University) GetHomePage() string {
	if m != nil {
		return m.HomePage
	}
	return ""
}

func (m *University) GetRegistrationPage() string {
	if m != nil {
		return m.RegistrationPage
	}
	return ""
}

func (m *University) GetMainColor() string {
	if m != nil {
		return m.MainColor
	}
	return ""
}

func (m *University) GetAccentColor() string {
	if m != nil {
		return m.AccentColor
	}
	return ""
}

func (m *University) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *University) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *University) GetResolvedSemesters() *ResolvedSemester {
	if m != nil {
		return m.ResolvedSemesters
	}
	return nil
}

func (m *University) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *University) GetAvailableSemesters() []*Semester {
	if m != nil {
		return m.AvailableSemesters
	}
	return nil
}

func (m *University) GetRegistrations() []*Registration {
	if m != nil {
		return m.Registrations
	}
	return nil
}

func (m *University) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Subject struct {
	Id               int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId     int64       `protobuf:"varint,2,opt,name=university_id" json:"-" db:"university_id"`
	Name             string      `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Number           string      `protobuf:"bytes,4,opt,name=number" json:"number" db:"number"`
	Season           string      `protobuf:"bytes,5,opt,name=season" json:"season" db:"season"`
	Year             string      `protobuf:"bytes,6,opt,name=year" json:"year" db:"year"`
	TopicName        string      `protobuf:"bytes,7,opt,name=topic_name" json:"topic_name" db:"topic_name"`
	TopicId          string      `protobuf:"bytes,8,opt,name=topic_id" json:"topic_id" db:"topic_id"`
	Courses          []*Course   `protobuf:"bytes,9,rep,name=courses" json:"courses,omitempty"`
	Metadata         []*Metadata `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *Subject) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Subject) GetUniversityId() int64 {
	if m != nil {
		return m.UniversityId
	}
	return 0
}

func (m *Subject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subject) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Subject) GetSeason() string {
	if m != nil {
		return m.Season
	}
	return ""
}

func (m *Subject) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *Subject) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Subject) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Subject) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *Subject) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Course struct {
	Id               int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SubjectId        int64       `protobuf:"varint,2,opt,name=subject_id" json:"-" db:"subject_id"`
	Name             string      `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Number           string      `protobuf:"bytes,4,opt,name=number" json:"number" db:"number"`
	Synopsis         *string     `protobuf:"bytes,5,opt,name=synopsis" json:"synopsis,omitempty" db:"synopsis"`
	TopicName        string      `protobuf:"bytes,6,opt,name=topic_name" json:"topic_name" db:"topic_name"`
	TopicId          string      `protobuf:"bytes,7,opt,name=topic_id" json:"topic_id" db:"topic_id"`
	Sections         []*Section  `protobuf:"bytes,8,rep,name=sections" json:"sections,omitempty"`
	Metadata         []*Metadata `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *Course) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Course) GetSubjectId() int64 {
	if m != nil {
		return m.SubjectId
	}
	return 0
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Course) GetSynopsis() string {
	if m != nil && m.Synopsis != nil {
		return *m.Synopsis
	}
	return ""
}

func (m *Course) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Course) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Course) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Course) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Section struct {
	Id               int64         `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	CourseId         int64         `protobuf:"varint,2,opt,name=course_id" json:"-" db:"course_id"`
	Number           string        `protobuf:"bytes,3,opt,name=number" json:"number" db:"number"`
	CallNumber       string        `protobuf:"bytes,4,opt,name=call_number" json:"call_number" db:"call_number"`
	Max              int64         `protobuf:"varint,5,opt,name=max" json:"max" db:"max"`
	Now              int64         `protobuf:"varint,6,opt,name=now" json:"now" db:"now"`
	Status           string        `protobuf:"bytes,7,opt,name=status" json:"status" db:"status"`
	Credits          string        `protobuf:"bytes,8,opt,name=credits" json:"credits" db:"credits"`
	TopicName        string        `protobuf:"bytes,9,opt,name=topic_name" json:"topic_name" db:"topic_name"`
	TopicId          string        `protobuf:"bytes,10,opt,name=topic_id" json:"topic_id" db:"topic_id"`
	Meetings         []*Meeting    `protobuf:"bytes,11,rep,name=meetings" json:"meetings,omitempty"`
	Instructors      []*Instructor `protobuf:"bytes,12,rep,name=instructors" json:"instructors,omitempty"`
	Books            []*Book       `protobuf:"bytes,13,rep,name=books" json:"books,omitempty"`
	Metadata         []*Metadata   `protobuf:"bytes,14,rep,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Section) Reset()                    { *m = Section{} }
func (*Section) ProtoMessage()               {}
func (*Section) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *Section) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Section) GetCourseId() int64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *Section) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Section) GetCallNumber() string {
	if m != nil {
		return m.CallNumber
	}
	return ""
}

func (m *Section) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Section) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Section) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Section) GetCredits() string {
	if m != nil {
		return m.Credits
	}
	return ""
}

func (m *Section) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Section) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Section) GetMeetings() []*Meeting {
	if m != nil {
		return m.Meetings
	}
	return nil
}

func (m *Section) GetInstructors() []*Instructor {
	if m != nil {
		return m.Instructors
	}
	return nil
}

func (m *Section) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

func (m *Section) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Meeting struct {
	Id               int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId        int64       `protobuf:"varint,2,opt,name=section_id" json:"-" db:"section_id"`
	Room             *string     `protobuf:"bytes,3,opt,name=room" json:"room,omitempty" db:"room"`
	Day              *string     `protobuf:"bytes,4,opt,name=day" json:"day,omitempty" db:"day"`
	StartTime        *string     `protobuf:"bytes,5,opt,name=start_time" json:"start_time,omitempty" db:"start_time"`
	EndTime          *string     `protobuf:"bytes,6,opt,name=end_time" json:"end_time,omitempty" db:"end_time"`
	ClassType        *string     `protobuf:"bytes,7,opt,name=class_type" json:"class_type,omitempty" db:"class_type"`
	Index            int32       `protobuf:"varint,8,opt,name=index" json:"index" db:"index"`
	Metadata         []*Metadata `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Meeting) Reset()                    { *m = Meeting{} }
func (*Meeting) ProtoMessage()               {}
func (*Meeting) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{4} }

func (m *Meeting) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Meeting) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Meeting) GetRoom() string {
	if m != nil && m.Room != nil {
		return *m.Room
	}
	return ""
}

func (m *Meeting) GetDay() string {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return ""
}

func (m *Meeting) GetStartTime() string {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return ""
}

func (m *Meeting) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func (m *Meeting) GetClassType() string {
	if m != nil && m.ClassType != nil {
		return *m.ClassType
	}
	return ""
}

func (m *Meeting) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Meeting) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Instructor struct {
	Id               int64  `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId        int64  `protobuf:"varint,2,opt,name=section_id" json:"-" db:"section_id"`
	Name             string `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Index            int32  `protobuf:"varint,4,opt,name=index" json:"-" db:"index"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Instructor) Reset()                    { *m = Instructor{} }
func (*Instructor) ProtoMessage()               {}
func (*Instructor) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{5} }

func (m *Instructor) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Instructor) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Instructor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instructor) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Book struct {
	Id               int64  `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId        int64  `protobuf:"varint,2,opt,name=section_id" json:"-" db:"section_id"`
	Title            string `protobuf:"bytes,3,opt,name=title" json:"title" db:"title"`
	Url              string `protobuf:"bytes,4,opt,name=url" json:"url" db:"url"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{6} }

func (m *Book) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Metadata struct {
	Id               int64  `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId     *int64 `protobuf:"varint,2,opt,name=university_id" json:"-" db:"university_id"`
	SubjectId        *int64 `protobuf:"varint,3,opt,name=subject_id" json:"-" db:"subject_id"`
	CourseId         *int64 `protobuf:"varint,4,opt,name=course_id" json:"-" db:"course_id"`
	SectionId        *int64 `protobuf:"varint,5,opt,name=section_id" json:"-" db:"section_id"`
	MeetingId        *int64 `protobuf:"varint,6,opt,name=meeting_id" json:"-" db:"meeting_id"`
	Title            string `protobuf:"bytes,7,opt,name=title" json:"title" db:"title"`
	Content          string `protobuf:"bytes,8,opt,name=content" json:"content" db:"content"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{7} }

func (m *Metadata) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Metadata) GetUniversityId() int64 {
	if m != nil && m.UniversityId != nil {
		return *m.UniversityId
	}
	return 0
}

func (m *Metadata) GetSubjectId() int64 {
	if m != nil && m.SubjectId != nil {
		return *m.SubjectId
	}
	return 0
}

func (m *Metadata) GetCourseId() int64 {
	if m != nil && m.CourseId != nil {
		return *m.CourseId
	}
	return 0
}

func (m *Metadata) GetSectionId() int64 {
	if m != nil && m.SectionId != nil {
		return *m.SectionId
	}
	return 0
}

func (m *Metadata) GetMeetingId() int64 {
	if m != nil && m.MeetingId != nil {
		return *m.MeetingId
	}
	return 0
}

func (m *Metadata) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Metadata) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Registration struct {
	Id               int64  `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId     int64  `protobuf:"varint,2,opt,name=university_id" json:"-" db:"university_id"`
	Period           string `protobuf:"bytes,3,opt,name=period" json:"period" db:"period"`
	PeriodDate       int64  `protobuf:"varint,4,opt,name=period_date" json:"period_date" db:"period_date"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Registration) Reset()                    { *m = Registration{} }
func (*Registration) ProtoMessage()               {}
func (*Registration) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{8} }

func (m *Registration) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Registration) GetUniversityId() int64 {
	if m != nil {
		return m.UniversityId
	}
	return 0
}

func (m *Registration) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Registration) GetPeriodDate() int64 {
	if m != nil {
		return m.PeriodDate
	}
	return 0
}

type ResolvedSemester struct {
	Current          *Semester `protobuf:"bytes,1,opt,name=current" json:"current,omitempty"`
	Last             *Semester `protobuf:"bytes,2,opt,name=last" json:"last,omitempty"`
	Next             *Semester `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ResolvedSemester) Reset()                    { *m = ResolvedSemester{} }
func (*ResolvedSemester) ProtoMessage()               {}
func (*ResolvedSemester) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{9} }

func (m *ResolvedSemester) GetCurrent() *Semester {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *ResolvedSemester) GetLast() *Semester {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *ResolvedSemester) GetNext() *Semester {
	if m != nil {
		return m.Next
	}
	return nil
}

type Semester struct {
	Year             int32  `protobuf:"varint,1,opt,name=year" json:"year" db:"year"`
	Season           string `protobuf:"bytes,2,opt,name=season" json:"season" db:"season"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Semester) Reset()                    { *m = Semester{} }
func (*Semester) ProtoMessage()               {}
func (*Semester) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{10} }

func (m *Semester) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Semester) GetSeason() string {
	if m != nil {
		return m.Season
	}
	return ""
}

type UCTNotification struct {
	NotificationId   int64      `protobuf:"varint,1,opt,name=notification_id" json:"notification_id"`
	TopicName        string     `protobuf:"bytes,2,opt,name=topic_name" json:"topic_name"`
	Status           string     `protobuf:"bytes,3,opt,name=status" json:"status"`
	University       University `protobuf:"bytes,4,opt,name=university" json:"university"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UCTNotification) Reset()                    { *m = UCTNotification{} }
func (*UCTNotification) ProtoMessage()               {}
func (*UCTNotification) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{11} }

func (m *UCTNotification) GetNotificationId() int64 {
	if m != nil {
		return m.NotificationId
	}
	return 0
}

func (m *UCTNotification) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *UCTNotification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UCTNotification) GetUniversity() University {
	if m != nil {
		return m.University
	}
	return University{}
}

type Response struct {
	Meta             *Meta  `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data             *Data  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{12} }

func (m *Response) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Response) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Meta struct {
	Code             *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{13} }

func (m *Meta) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Meta) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Data struct {
	Universities     []*University `protobuf:"bytes,1,rep,name=universities" json:"universities,omitempty"`
	Subjects         []*Subject    `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
	Courses          []*Course     `protobuf:"bytes,3,rep,name=courses" json:"courses,omitempty"`
	Sections         []*Section    `protobuf:"bytes,4,rep,name=sections" json:"sections,omitempty"`
	University       *University   `protobuf:"bytes,5,opt,name=university" json:"university,omitempty"`
	Subject          *Subject      `protobuf:"bytes,6,opt,name=subject" json:"subject,omitempty"`
	Course           *Course       `protobuf:"bytes,7,opt,name=course" json:"course,omitempty"`
	Section          *Section      `protobuf:"bytes,8,opt,name=section" json:"section,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{14} }

func (m *Data) GetUniversities() []*University {
	if m != nil {
		return m.Universities
	}
	return nil
}

func (m *Data) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *Data) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *Data) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Data) GetUniversity() *University {
	if m != nil {
		return m.University
	}
	return nil
}

func (m *Data) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Data) GetCourse() *Course {
	if m != nil {
		return m.Course
	}
	return nil
}

func (m *Data) GetSection() *Section {
	if m != nil {
		return m.Section
	}
	return nil
}

func init() {
	proto.RegisterType((*University)(nil), "model.University")
	proto.RegisterType((*Subject)(nil), "model.Subject")
	proto.RegisterType((*Course)(nil), "model.Course")
	proto.RegisterType((*Section)(nil), "model.Section")
	proto.RegisterType((*Meeting)(nil), "model.Meeting")
	proto.RegisterType((*Instructor)(nil), "model.Instructor")
	proto.RegisterType((*Book)(nil), "model.Book")
	proto.RegisterType((*Metadata)(nil), "model.Metadata")
	proto.RegisterType((*Registration)(nil), "model.Registration")
	proto.RegisterType((*ResolvedSemester)(nil), "model.ResolvedSemester")
	proto.RegisterType((*Semester)(nil), "model.Semester")
	proto.RegisterType((*UCTNotification)(nil), "model.UCTNotification")
	proto.RegisterType((*Response)(nil), "model.Response")
	proto.RegisterType((*Meta)(nil), "model.Meta")
	proto.RegisterType((*Data)(nil), "model.Data")
}
func (this *University) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*University)
	if !ok {
		that2, ok := that.(University)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *University")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *University but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *University but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Abbr != that1.Abbr {
		return fmt.Errorf("Abbr this(%v) Not Equal that(%v)", this.Abbr, that1.Abbr)
	}
	if this.HomePage != that1.HomePage {
		return fmt.Errorf("HomePage this(%v) Not Equal that(%v)", this.HomePage, that1.HomePage)
	}
	if this.RegistrationPage != that1.RegistrationPage {
		return fmt.Errorf("RegistrationPage this(%v) Not Equal that(%v)", this.RegistrationPage, that1.RegistrationPage)
	}
	if this.MainColor != that1.MainColor {
		return fmt.Errorf("MainColor this(%v) Not Equal that(%v)", this.MainColor, that1.MainColor)
	}
	if this.AccentColor != that1.AccentColor {
		return fmt.Errorf("AccentColor this(%v) Not Equal that(%v)", this.AccentColor, that1.AccentColor)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if !this.ResolvedSemesters.Equal(that1.ResolvedSemesters) {
		return fmt.Errorf("ResolvedSemesters this(%v) Not Equal that(%v)", this.ResolvedSemesters, that1.ResolvedSemesters)
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return fmt.Errorf("Subjects this(%v) Not Equal that(%v)", len(this.Subjects), len(that1.Subjects))
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return fmt.Errorf("Subjects this[%v](%v) Not Equal that[%v](%v)", i, this.Subjects[i], i, that1.Subjects[i])
		}
	}
	if len(this.AvailableSemesters) != len(that1.AvailableSemesters) {
		return fmt.Errorf("AvailableSemesters this(%v) Not Equal that(%v)", len(this.AvailableSemesters), len(that1.AvailableSemesters))
	}
	for i := range this.AvailableSemesters {
		if !this.AvailableSemesters[i].Equal(that1.AvailableSemesters[i]) {
			return fmt.Errorf("AvailableSemesters this[%v](%v) Not Equal that[%v](%v)", i, this.AvailableSemesters[i], i, that1.AvailableSemesters[i])
		}
	}
	if len(this.Registrations) != len(that1.Registrations) {
		return fmt.Errorf("Registrations this(%v) Not Equal that(%v)", len(this.Registrations), len(that1.Registrations))
	}
	for i := range this.Registrations {
		if !this.Registrations[i].Equal(that1.Registrations[i]) {
			return fmt.Errorf("Registrations this[%v](%v) Not Equal that[%v](%v)", i, this.Registrations[i], i, that1.Registrations[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *University) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*University)
	if !ok {
		that2, ok := that.(University)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Abbr != that1.Abbr {
		return false
	}
	if this.HomePage != that1.HomePage {
		return false
	}
	if this.RegistrationPage != that1.RegistrationPage {
		return false
	}
	if this.MainColor != that1.MainColor {
		return false
	}
	if this.AccentColor != that1.AccentColor {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.ResolvedSemesters.Equal(that1.ResolvedSemesters) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if len(this.AvailableSemesters) != len(that1.AvailableSemesters) {
		return false
	}
	for i := range this.AvailableSemesters {
		if !this.AvailableSemesters[i].Equal(that1.AvailableSemesters[i]) {
			return false
		}
	}
	if len(this.Registrations) != len(that1.Registrations) {
		return false
	}
	for i := range this.Registrations {
		if !this.Registrations[i].Equal(that1.Registrations[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subject) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subject)
	if !ok {
		that2, ok := that.(Subject)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subject")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subject but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subject but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != that1.UniversityId {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Season != that1.Season {
		return fmt.Errorf("Season this(%v) Not Equal that(%v)", this.Season, that1.Season)
	}
	if this.Year != that1.Year {
		return fmt.Errorf("Year this(%v) Not Equal that(%v)", this.Year, that1.Year)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Courses) != len(that1.Courses) {
		return fmt.Errorf("Courses this(%v) Not Equal that(%v)", len(this.Courses), len(that1.Courses))
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return fmt.Errorf("Courses this[%v](%v) Not Equal that[%v](%v)", i, this.Courses[i], i, that1.Courses[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Subject) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subject)
	if !ok {
		that2, ok := that.(Subject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != that1.UniversityId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Course) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Course")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Course but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Course but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SubjectId != that1.SubjectId {
		return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", this.SubjectId, that1.SubjectId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Synopsis != nil && that1.Synopsis != nil {
		if *this.Synopsis != *that1.Synopsis {
			return fmt.Errorf("Synopsis this(%v) Not Equal that(%v)", *this.Synopsis, *that1.Synopsis)
		}
	} else if this.Synopsis != nil {
		return fmt.Errorf("this.Synopsis == nil && that.Synopsis != nil")
	} else if that1.Synopsis != nil {
		return fmt.Errorf("Synopsis this(%v) Not Equal that(%v)", this.Synopsis, that1.Synopsis)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Sections) != len(that1.Sections) {
		return fmt.Errorf("Sections this(%v) Not Equal that(%v)", len(this.Sections), len(that1.Sections))
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return fmt.Errorf("Sections this[%v](%v) Not Equal that[%v](%v)", i, this.Sections[i], i, that1.Sections[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Course) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SubjectId != that1.SubjectId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Synopsis != nil && that1.Synopsis != nil {
		if *this.Synopsis != *that1.Synopsis {
			return false
		}
	} else if this.Synopsis != nil {
		return false
	} else if that1.Synopsis != nil {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Section) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Section)
	if !ok {
		that2, ok := that.(Section)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Section")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Section but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Section but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.CourseId != that1.CourseId {
		return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", this.CourseId, that1.CourseId)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.CallNumber != that1.CallNumber {
		return fmt.Errorf("CallNumber this(%v) Not Equal that(%v)", this.CallNumber, that1.CallNumber)
	}
	if this.Max != that1.Max {
		return fmt.Errorf("Max this(%v) Not Equal that(%v)", this.Max, that1.Max)
	}
	if this.Now != that1.Now {
		return fmt.Errorf("Now this(%v) Not Equal that(%v)", this.Now, that1.Now)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Credits != that1.Credits {
		return fmt.Errorf("Credits this(%v) Not Equal that(%v)", this.Credits, that1.Credits)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Meetings) != len(that1.Meetings) {
		return fmt.Errorf("Meetings this(%v) Not Equal that(%v)", len(this.Meetings), len(that1.Meetings))
	}
	for i := range this.Meetings {
		if !this.Meetings[i].Equal(that1.Meetings[i]) {
			return fmt.Errorf("Meetings this[%v](%v) Not Equal that[%v](%v)", i, this.Meetings[i], i, that1.Meetings[i])
		}
	}
	if len(this.Instructors) != len(that1.Instructors) {
		return fmt.Errorf("Instructors this(%v) Not Equal that(%v)", len(this.Instructors), len(that1.Instructors))
	}
	for i := range this.Instructors {
		if !this.Instructors[i].Equal(that1.Instructors[i]) {
			return fmt.Errorf("Instructors this[%v](%v) Not Equal that[%v](%v)", i, this.Instructors[i], i, that1.Instructors[i])
		}
	}
	if len(this.Books) != len(that1.Books) {
		return fmt.Errorf("Books this(%v) Not Equal that(%v)", len(this.Books), len(that1.Books))
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return fmt.Errorf("Books this[%v](%v) Not Equal that[%v](%v)", i, this.Books[i], i, that1.Books[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Section) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Section)
	if !ok {
		that2, ok := that.(Section)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.CallNumber != that1.CallNumber {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Credits != that1.Credits {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Meetings) != len(that1.Meetings) {
		return false
	}
	for i := range this.Meetings {
		if !this.Meetings[i].Equal(that1.Meetings[i]) {
			return false
		}
	}
	if len(this.Instructors) != len(that1.Instructors) {
		return false
	}
	for i := range this.Instructors {
		if !this.Instructors[i].Equal(that1.Instructors[i]) {
			return false
		}
	}
	if len(this.Books) != len(that1.Books) {
		return false
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Meeting) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Meeting)
	if !ok {
		that2, ok := that.(Meeting)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Meeting")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Meeting but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Meeting but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Room != nil && that1.Room != nil {
		if *this.Room != *that1.Room {
			return fmt.Errorf("Room this(%v) Not Equal that(%v)", *this.Room, *that1.Room)
		}
	} else if this.Room != nil {
		return fmt.Errorf("this.Room == nil && that.Room != nil")
	} else if that1.Room != nil {
		return fmt.Errorf("Room this(%v) Not Equal that(%v)", this.Room, that1.Room)
	}
	if this.Day != nil && that1.Day != nil {
		if *this.Day != *that1.Day {
			return fmt.Errorf("Day this(%v) Not Equal that(%v)", *this.Day, *that1.Day)
		}
	} else if this.Day != nil {
		return fmt.Errorf("this.Day == nil && that.Day != nil")
	} else if that1.Day != nil {
		return fmt.Errorf("Day this(%v) Not Equal that(%v)", this.Day, that1.Day)
	}
	if this.StartTime != nil && that1.StartTime != nil {
		if *this.StartTime != *that1.StartTime {
			return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", *this.StartTime, *that1.StartTime)
		}
	} else if this.StartTime != nil {
		return fmt.Errorf("this.StartTime == nil && that.StartTime != nil")
	} else if that1.StartTime != nil {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if this.EndTime != nil && that1.EndTime != nil {
		if *this.EndTime != *that1.EndTime {
			return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", *this.EndTime, *that1.EndTime)
		}
	} else if this.EndTime != nil {
		return fmt.Errorf("this.EndTime == nil && that.EndTime != nil")
	} else if that1.EndTime != nil {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if this.ClassType != nil && that1.ClassType != nil {
		if *this.ClassType != *that1.ClassType {
			return fmt.Errorf("ClassType this(%v) Not Equal that(%v)", *this.ClassType, *that1.ClassType)
		}
	} else if this.ClassType != nil {
		return fmt.Errorf("this.ClassType == nil && that.ClassType != nil")
	} else if that1.ClassType != nil {
		return fmt.Errorf("ClassType this(%v) Not Equal that(%v)", this.ClassType, that1.ClassType)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Meeting) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Meeting)
	if !ok {
		that2, ok := that.(Meeting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Room != nil && that1.Room != nil {
		if *this.Room != *that1.Room {
			return false
		}
	} else if this.Room != nil {
		return false
	} else if that1.Room != nil {
		return false
	}
	if this.Day != nil && that1.Day != nil {
		if *this.Day != *that1.Day {
			return false
		}
	} else if this.Day != nil {
		return false
	} else if that1.Day != nil {
		return false
	}
	if this.StartTime != nil && that1.StartTime != nil {
		if *this.StartTime != *that1.StartTime {
			return false
		}
	} else if this.StartTime != nil {
		return false
	} else if that1.StartTime != nil {
		return false
	}
	if this.EndTime != nil && that1.EndTime != nil {
		if *this.EndTime != *that1.EndTime {
			return false
		}
	} else if this.EndTime != nil {
		return false
	} else if that1.EndTime != nil {
		return false
	}
	if this.ClassType != nil && that1.ClassType != nil {
		if *this.ClassType != *that1.ClassType {
			return false
		}
	} else if this.ClassType != nil {
		return false
	} else if that1.ClassType != nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instructor) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Instructor)
	if !ok {
		that2, ok := that.(Instructor)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Instructor")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Instructor but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Instructor but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Instructor) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Instructor)
	if !ok {
		that2, ok := that.(Instructor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Book) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Book")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Book but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Book but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Book) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Metadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Metadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Metadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Metadata but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != nil && that1.UniversityId != nil {
		if *this.UniversityId != *that1.UniversityId {
			return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", *this.UniversityId, *that1.UniversityId)
		}
	} else if this.UniversityId != nil {
		return fmt.Errorf("this.UniversityId == nil && that.UniversityId != nil")
	} else if that1.UniversityId != nil {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.SubjectId != nil && that1.SubjectId != nil {
		if *this.SubjectId != *that1.SubjectId {
			return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", *this.SubjectId, *that1.SubjectId)
		}
	} else if this.SubjectId != nil {
		return fmt.Errorf("this.SubjectId == nil && that.SubjectId != nil")
	} else if that1.SubjectId != nil {
		return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", this.SubjectId, that1.SubjectId)
	}
	if this.CourseId != nil && that1.CourseId != nil {
		if *this.CourseId != *that1.CourseId {
			return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", *this.CourseId, *that1.CourseId)
		}
	} else if this.CourseId != nil {
		return fmt.Errorf("this.CourseId == nil && that.CourseId != nil")
	} else if that1.CourseId != nil {
		return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", this.CourseId, that1.CourseId)
	}
	if this.SectionId != nil && that1.SectionId != nil {
		if *this.SectionId != *that1.SectionId {
			return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", *this.SectionId, *that1.SectionId)
		}
	} else if this.SectionId != nil {
		return fmt.Errorf("this.SectionId == nil && that.SectionId != nil")
	} else if that1.SectionId != nil {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.MeetingId != nil && that1.MeetingId != nil {
		if *this.MeetingId != *that1.MeetingId {
			return fmt.Errorf("MeetingId this(%v) Not Equal that(%v)", *this.MeetingId, *that1.MeetingId)
		}
	} else if this.MeetingId != nil {
		return fmt.Errorf("this.MeetingId == nil && that.MeetingId != nil")
	} else if that1.MeetingId != nil {
		return fmt.Errorf("MeetingId this(%v) Not Equal that(%v)", this.MeetingId, that1.MeetingId)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != nil && that1.UniversityId != nil {
		if *this.UniversityId != *that1.UniversityId {
			return false
		}
	} else if this.UniversityId != nil {
		return false
	} else if that1.UniversityId != nil {
		return false
	}
	if this.SubjectId != nil && that1.SubjectId != nil {
		if *this.SubjectId != *that1.SubjectId {
			return false
		}
	} else if this.SubjectId != nil {
		return false
	} else if that1.SubjectId != nil {
		return false
	}
	if this.CourseId != nil && that1.CourseId != nil {
		if *this.CourseId != *that1.CourseId {
			return false
		}
	} else if this.CourseId != nil {
		return false
	} else if that1.CourseId != nil {
		return false
	}
	if this.SectionId != nil && that1.SectionId != nil {
		if *this.SectionId != *that1.SectionId {
			return false
		}
	} else if this.SectionId != nil {
		return false
	} else if that1.SectionId != nil {
		return false
	}
	if this.MeetingId != nil && that1.MeetingId != nil {
		if *this.MeetingId != *that1.MeetingId {
			return false
		}
	} else if this.MeetingId != nil {
		return false
	} else if that1.MeetingId != nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Registration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Registration)
	if !ok {
		that2, ok := that.(Registration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Registration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Registration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Registration but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != that1.UniversityId {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.Period != that1.Period {
		return fmt.Errorf("Period this(%v) Not Equal that(%v)", this.Period, that1.Period)
	}
	if this.PeriodDate != that1.PeriodDate {
		return fmt.Errorf("PeriodDate this(%v) Not Equal that(%v)", this.PeriodDate, that1.PeriodDate)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Registration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Registration)
	if !ok {
		that2, ok := that.(Registration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != that1.UniversityId {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	if this.PeriodDate != that1.PeriodDate {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResolvedSemester) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResolvedSemester)
	if !ok {
		that2, ok := that.(ResolvedSemester)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResolvedSemester")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResolvedSemester but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResolvedSemester but is not nil && this == nil")
	}
	if !this.Current.Equal(that1.Current) {
		return fmt.Errorf("Current this(%v) Not Equal that(%v)", this.Current, that1.Current)
	}
	if !this.Last.Equal(that1.Last) {
		return fmt.Errorf("Last this(%v) Not Equal that(%v)", this.Last, that1.Last)
	}
	if !this.Next.Equal(that1.Next) {
		return fmt.Errorf("Next this(%v) Not Equal that(%v)", this.Next, that1.Next)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ResolvedSemester) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResolvedSemester)
	if !ok {
		that2, ok := that.(ResolvedSemester)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Current.Equal(that1.Current) {
		return false
	}
	if !this.Last.Equal(that1.Last) {
		return false
	}
	if !this.Next.Equal(that1.Next) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Semester) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Semester)
	if !ok {
		that2, ok := that.(Semester)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Semester")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Semester but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Semester but is not nil && this == nil")
	}
	if this.Year != that1.Year {
		return fmt.Errorf("Year this(%v) Not Equal that(%v)", this.Year, that1.Year)
	}
	if this.Season != that1.Season {
		return fmt.Errorf("Season this(%v) Not Equal that(%v)", this.Season, that1.Season)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Semester) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Semester)
	if !ok {
		that2, ok := that.(Semester)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UCTNotification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UCTNotification)
	if !ok {
		that2, ok := that.(UCTNotification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UCTNotification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UCTNotification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UCTNotification but is not nil && this == nil")
	}
	if this.NotificationId != that1.NotificationId {
		return fmt.Errorf("NotificationId this(%v) Not Equal that(%v)", this.NotificationId, that1.NotificationId)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.University.Equal(&that1.University) {
		return fmt.Errorf("University this(%v) Not Equal that(%v)", this.University, that1.University)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UCTNotification) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UCTNotification)
	if !ok {
		that2, ok := that.(UCTNotification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NotificationId != that1.NotificationId {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.University.Equal(&that1.University) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Response but is not nil && this == nil")
	}
	if !this.Meta.Equal(that1.Meta) {
		return fmt.Errorf("Meta this(%v) Not Equal that(%v)", this.Meta, that1.Meta)
	}
	if !this.Data.Equal(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Meta) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Meta)
	if !ok {
		that2, ok := that.(Meta)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Meta")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Meta but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Meta but is not nil && this == nil")
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return fmt.Errorf("Code this(%v) Not Equal that(%v)", *this.Code, *that1.Code)
		}
	} else if this.Code != nil {
		return fmt.Errorf("this.Code == nil && that.Code != nil")
	} else if that1.Code != nil {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return fmt.Errorf("Message this(%v) Not Equal that(%v)", *this.Message, *that1.Message)
		}
	} else if this.Message != nil {
		return fmt.Errorf("this.Message == nil && that.Message != nil")
	} else if that1.Message != nil {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Meta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Meta)
	if !ok {
		that2, ok := that.(Meta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Data) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Data")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Data but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Data but is not nil && this == nil")
	}
	if len(this.Universities) != len(that1.Universities) {
		return fmt.Errorf("Universities this(%v) Not Equal that(%v)", len(this.Universities), len(that1.Universities))
	}
	for i := range this.Universities {
		if !this.Universities[i].Equal(that1.Universities[i]) {
			return fmt.Errorf("Universities this[%v](%v) Not Equal that[%v](%v)", i, this.Universities[i], i, that1.Universities[i])
		}
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return fmt.Errorf("Subjects this(%v) Not Equal that(%v)", len(this.Subjects), len(that1.Subjects))
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return fmt.Errorf("Subjects this[%v](%v) Not Equal that[%v](%v)", i, this.Subjects[i], i, that1.Subjects[i])
		}
	}
	if len(this.Courses) != len(that1.Courses) {
		return fmt.Errorf("Courses this(%v) Not Equal that(%v)", len(this.Courses), len(that1.Courses))
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return fmt.Errorf("Courses this[%v](%v) Not Equal that[%v](%v)", i, this.Courses[i], i, that1.Courses[i])
		}
	}
	if len(this.Sections) != len(that1.Sections) {
		return fmt.Errorf("Sections this(%v) Not Equal that(%v)", len(this.Sections), len(that1.Sections))
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return fmt.Errorf("Sections this[%v](%v) Not Equal that[%v](%v)", i, this.Sections[i], i, that1.Sections[i])
		}
	}
	if !this.University.Equal(that1.University) {
		return fmt.Errorf("University this(%v) Not Equal that(%v)", this.University, that1.University)
	}
	if !this.Subject.Equal(that1.Subject) {
		return fmt.Errorf("Subject this(%v) Not Equal that(%v)", this.Subject, that1.Subject)
	}
	if !this.Course.Equal(that1.Course) {
		return fmt.Errorf("Course this(%v) Not Equal that(%v)", this.Course, that1.Course)
	}
	if !this.Section.Equal(that1.Section) {
		return fmt.Errorf("Section this(%v) Not Equal that(%v)", this.Section, that1.Section)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Universities) != len(that1.Universities) {
		return false
	}
	for i := range this.Universities {
		if !this.Universities[i].Equal(that1.Universities[i]) {
			return false
		}
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if !this.University.Equal(that1.University) {
		return false
	}
	if !this.Subject.Equal(that1.Subject) {
		return false
	}
	if !this.Course.Equal(that1.Course) {
		return false
	}
	if !this.Section.Equal(that1.Section) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *University) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&model.University{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Abbr: "+fmt.Sprintf("%#v", this.Abbr)+",\n")
	s = append(s, "HomePage: "+fmt.Sprintf("%#v", this.HomePage)+",\n")
	s = append(s, "RegistrationPage: "+fmt.Sprintf("%#v", this.RegistrationPage)+",\n")
	s = append(s, "MainColor: "+fmt.Sprintf("%#v", this.MainColor)+",\n")
	s = append(s, "AccentColor: "+fmt.Sprintf("%#v", this.AccentColor)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.ResolvedSemesters != nil {
		s = append(s, "ResolvedSemesters: "+fmt.Sprintf("%#v", this.ResolvedSemesters)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	if this.AvailableSemesters != nil {
		s = append(s, "AvailableSemesters: "+fmt.Sprintf("%#v", this.AvailableSemesters)+",\n")
	}
	if this.Registrations != nil {
		s = append(s, "Registrations: "+fmt.Sprintf("%#v", this.Registrations)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&model.Subject{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UniversityId: "+fmt.Sprintf("%#v", this.UniversityId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Season: "+fmt.Sprintf("%#v", this.Season)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Course) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&model.Course{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SubjectId: "+fmt.Sprintf("%#v", this.SubjectId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	if this.Synopsis != nil {
		s = append(s, "Synopsis: "+valueToGoStringModel(this.Synopsis, "string")+",\n")
	}
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Section) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&model.Section{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "CallNumber: "+fmt.Sprintf("%#v", this.CallNumber)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Credits: "+fmt.Sprintf("%#v", this.Credits)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Meetings != nil {
		s = append(s, "Meetings: "+fmt.Sprintf("%#v", this.Meetings)+",\n")
	}
	if this.Instructors != nil {
		s = append(s, "Instructors: "+fmt.Sprintf("%#v", this.Instructors)+",\n")
	}
	if this.Books != nil {
		s = append(s, "Books: "+fmt.Sprintf("%#v", this.Books)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Meeting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&model.Meeting{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	if this.Room != nil {
		s = append(s, "Room: "+valueToGoStringModel(this.Room, "string")+",\n")
	}
	if this.Day != nil {
		s = append(s, "Day: "+valueToGoStringModel(this.Day, "string")+",\n")
	}
	if this.StartTime != nil {
		s = append(s, "StartTime: "+valueToGoStringModel(this.StartTime, "string")+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+valueToGoStringModel(this.EndTime, "string")+",\n")
	}
	if this.ClassType != nil {
		s = append(s, "ClassType: "+valueToGoStringModel(this.ClassType, "string")+",\n")
	}
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Instructor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Instructor{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Book) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Book{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&model.Metadata{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.UniversityId != nil {
		s = append(s, "UniversityId: "+valueToGoStringModel(this.UniversityId, "int64")+",\n")
	}
	if this.SubjectId != nil {
		s = append(s, "SubjectId: "+valueToGoStringModel(this.SubjectId, "int64")+",\n")
	}
	if this.CourseId != nil {
		s = append(s, "CourseId: "+valueToGoStringModel(this.CourseId, "int64")+",\n")
	}
	if this.SectionId != nil {
		s = append(s, "SectionId: "+valueToGoStringModel(this.SectionId, "int64")+",\n")
	}
	if this.MeetingId != nil {
		s = append(s, "MeetingId: "+valueToGoStringModel(this.MeetingId, "int64")+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Registration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Registration{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UniversityId: "+fmt.Sprintf("%#v", this.UniversityId)+",\n")
	s = append(s, "Period: "+fmt.Sprintf("%#v", this.Period)+",\n")
	s = append(s, "PeriodDate: "+fmt.Sprintf("%#v", this.PeriodDate)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolvedSemester) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&model.ResolvedSemester{")
	if this.Current != nil {
		s = append(s, "Current: "+fmt.Sprintf("%#v", this.Current)+",\n")
	}
	if this.Last != nil {
		s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	}
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Semester) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Semester{")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Season: "+fmt.Sprintf("%#v", this.Season)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UCTNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.UCTNotification{")
	s = append(s, "NotificationId: "+fmt.Sprintf("%#v", this.NotificationId)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "University: "+strings.Replace(this.University.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Response{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Meta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Meta{")
	if this.Code != nil {
		s = append(s, "Code: "+valueToGoStringModel(this.Code, "int32")+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+valueToGoStringModel(this.Message, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&model.Data{")
	if this.Universities != nil {
		s = append(s, "Universities: "+fmt.Sprintf("%#v", this.Universities)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	if this.University != nil {
		s = append(s, "University: "+fmt.Sprintf("%#v", this.University)+",\n")
	}
	if this.Subject != nil {
		s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	}
	if this.Course != nil {
		s = append(s, "Course: "+fmt.Sprintf("%#v", this.Course)+",\n")
	}
	if this.Section != nil {
		s = append(s, "Section: "+fmt.Sprintf("%#v", this.Section)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModel(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringModel(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *University) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *University) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x12
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Abbr)))
	i += copy(data[i:], m.Abbr)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(len(m.HomePage)))
	i += copy(data[i:], m.HomePage)
	data[i] = 0x2a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.RegistrationPage)))
	i += copy(data[i:], m.RegistrationPage)
	data[i] = 0x32
	i++
	i = encodeVarintModel(data, i, uint64(len(m.MainColor)))
	i += copy(data[i:], m.MainColor)
	data[i] = 0x3a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.AccentColor)))
	i += copy(data[i:], m.AccentColor)
	data[i] = 0x42
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicName)))
	i += copy(data[i:], m.TopicName)
	data[i] = 0x4a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicId)))
	i += copy(data[i:], m.TopicId)
	if m.ResolvedSemesters != nil {
		data[i] = 0x52
		i++
		i = encodeVarintModel(data, i, uint64(m.ResolvedSemesters.Size()))
		n1, err := m.ResolvedSemesters.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			data[i] = 0x5a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AvailableSemesters) > 0 {
		for _, msg := range m.AvailableSemesters {
			data[i] = 0x62
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Registrations) > 0 {
		for _, msg := range m.Registrations {
			data[i] = 0x6a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x72
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Subject) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Subject) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.UniversityId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Number)))
	i += copy(data[i:], m.Number)
	data[i] = 0x2a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Season)))
	i += copy(data[i:], m.Season)
	data[i] = 0x32
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Year)))
	i += copy(data[i:], m.Year)
	data[i] = 0x3a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicName)))
	i += copy(data[i:], m.TopicName)
	data[i] = 0x42
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicId)))
	i += copy(data[i:], m.TopicId)
	if len(m.Courses) > 0 {
		for _, msg := range m.Courses {
			data[i] = 0x4a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x52
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Course) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Course) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.SubjectId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Number)))
	i += copy(data[i:], m.Number)
	if m.Synopsis != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.Synopsis)))
		i += copy(data[i:], *m.Synopsis)
	}
	data[i] = 0x32
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicName)))
	i += copy(data[i:], m.TopicName)
	data[i] = 0x3a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicId)))
	i += copy(data[i:], m.TopicId)
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			data[i] = 0x42
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x4a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Section) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Section) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.CourseId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Number)))
	i += copy(data[i:], m.Number)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(len(m.CallNumber)))
	i += copy(data[i:], m.CallNumber)
	data[i] = 0x28
	i++
	i = encodeVarintModel(data, i, uint64(m.Max))
	data[i] = 0x30
	i++
	i = encodeVarintModel(data, i, uint64(m.Now))
	data[i] = 0x3a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Status)))
	i += copy(data[i:], m.Status)
	data[i] = 0x42
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Credits)))
	i += copy(data[i:], m.Credits)
	data[i] = 0x4a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicName)))
	i += copy(data[i:], m.TopicName)
	data[i] = 0x52
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicId)))
	i += copy(data[i:], m.TopicId)
	if len(m.Meetings) > 0 {
		for _, msg := range m.Meetings {
			data[i] = 0x5a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Instructors) > 0 {
		for _, msg := range m.Instructors {
			data[i] = 0x62
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Books) > 0 {
		for _, msg := range m.Books {
			data[i] = 0x6a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x72
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Meeting) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Meeting) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.SectionId))
	if m.Room != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.Room)))
		i += copy(data[i:], *m.Room)
	}
	if m.Day != nil {
		data[i] = 0x22
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.Day)))
		i += copy(data[i:], *m.Day)
	}
	if m.StartTime != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.StartTime)))
		i += copy(data[i:], *m.StartTime)
	}
	if m.EndTime != nil {
		data[i] = 0x32
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.EndTime)))
		i += copy(data[i:], *m.EndTime)
	}
	if m.ClassType != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.ClassType)))
		i += copy(data[i:], *m.ClassType)
	}
	data[i] = 0x40
	i++
	i = encodeVarintModel(data, i, uint64(m.Index))
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x4a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Instructor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Instructor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.SectionId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	data[i] = 0x20
	i++
	i = encodeVarintModel(data, i, uint64(m.Index))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Book) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Book) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.SectionId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Title)))
	i += copy(data[i:], m.Title)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Url)))
	i += copy(data[i:], m.Url)
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Metadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Metadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	if m.UniversityId != nil {
		data[i] = 0x10
		i++
		i = encodeVarintModel(data, i, uint64(*m.UniversityId))
	}
	if m.SubjectId != nil {
		data[i] = 0x18
		i++
		i = encodeVarintModel(data, i, uint64(*m.SubjectId))
	}
	if m.CourseId != nil {
		data[i] = 0x20
		i++
		i = encodeVarintModel(data, i, uint64(*m.CourseId))
	}
	if m.SectionId != nil {
		data[i] = 0x28
		i++
		i = encodeVarintModel(data, i, uint64(*m.SectionId))
	}
	if m.MeetingId != nil {
		data[i] = 0x30
		i++
		i = encodeVarintModel(data, i, uint64(*m.MeetingId))
	}
	data[i] = 0x3a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Title)))
	i += copy(data[i:], m.Title)
	data[i] = 0x42
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Content)))
	i += copy(data[i:], m.Content)
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Registration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Registration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Id))
	data[i] = 0x10
	i++
	i = encodeVarintModel(data, i, uint64(m.UniversityId))
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Period)))
	i += copy(data[i:], m.Period)
	data[i] = 0x20
	i++
	i = encodeVarintModel(data, i, uint64(m.PeriodDate))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResolvedSemester) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResolvedSemester) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Current != nil {
		data[i] = 0xa
		i++
		i = encodeVarintModel(data, i, uint64(m.Current.Size()))
		n2, err := m.Current.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Last != nil {
		data[i] = 0x12
		i++
		i = encodeVarintModel(data, i, uint64(m.Last.Size()))
		n3, err := m.Last.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Next != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintModel(data, i, uint64(m.Next.Size()))
		n4, err := m.Next.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Semester) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Semester) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.Year))
	data[i] = 0x12
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Season)))
	i += copy(data[i:], m.Season)
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UCTNotification) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UCTNotification) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintModel(data, i, uint64(m.NotificationId))
	data[i] = 0x12
	i++
	i = encodeVarintModel(data, i, uint64(len(m.TopicName)))
	i += copy(data[i:], m.TopicName)
	data[i] = 0x1a
	i++
	i = encodeVarintModel(data, i, uint64(len(m.Status)))
	i += copy(data[i:], m.Status)
	data[i] = 0x22
	i++
	i = encodeVarintModel(data, i, uint64(m.University.Size()))
	n5, err := m.University.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Response) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Response) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		data[i] = 0xa
		i++
		i = encodeVarintModel(data, i, uint64(m.Meta.Size()))
		n6, err := m.Meta.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Data != nil {
		data[i] = 0x12
		i++
		i = encodeVarintModel(data, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Meta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Meta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		data[i] = 0x8
		i++
		i = encodeVarintModel(data, i, uint64(*m.Code))
	}
	if m.Message != nil {
		data[i] = 0x12
		i++
		i = encodeVarintModel(data, i, uint64(len(*m.Message)))
		i += copy(data[i:], *m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Data) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Data) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Universities) > 0 {
		for _, msg := range m.Universities {
			data[i] = 0xa
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Subjects) > 0 {
		for _, msg := range m.Subjects {
			data[i] = 0x12
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Courses) > 0 {
		for _, msg := range m.Courses {
			data[i] = 0x1a
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			data[i] = 0x22
			i++
			i = encodeVarintModel(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.University != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintModel(data, i, uint64(m.University.Size()))
		n8, err := m.University.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Subject != nil {
		data[i] = 0x32
		i++
		i = encodeVarintModel(data, i, uint64(m.Subject.Size()))
		n9, err := m.Subject.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Course != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintModel(data, i, uint64(m.Course.Size()))
		n10, err := m.Course.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Section != nil {
		data[i] = 0x42
		i++
		i = encodeVarintModel(data, i, uint64(m.Section.Size()))
		n11, err := m.Section.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Model(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Model(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModel(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUniversity(r randyModel, easy bool) *University {
	this := &University{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = randStringModel(r)
	this.Abbr = randStringModel(r)
	this.HomePage = randStringModel(r)
	this.RegistrationPage = randStringModel(r)
	this.MainColor = randStringModel(r)
	this.AccentColor = randStringModel(r)
	this.TopicName = randStringModel(r)
	this.TopicId = randStringModel(r)
	if r.Intn(10) != 0 {
		this.ResolvedSemesters = NewPopulatedResolvedSemester(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Subjects = make([]*Subject, v1)
		for i := 0; i < v1; i++ {
			this.Subjects[i] = NewPopulatedSubject(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.AvailableSemesters = make([]*Semester, v2)
		for i := 0; i < v2; i++ {
			this.AvailableSemesters[i] = NewPopulatedSemester(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Registrations = make([]*Registration, v3)
		for i := 0; i < v3; i++ {
			this.Registrations[i] = NewPopulatedRegistration(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Metadata = make([]*Metadata, v4)
		for i := 0; i < v4; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 15)
	}
	return this
}

func NewPopulatedSubject(r randyModel, easy bool) *Subject {
	this := &Subject{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.UniversityId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UniversityId *= -1
	}
	this.Name = randStringModel(r)
	this.Number = randStringModel(r)
	this.Season = randStringModel(r)
	this.Year = randStringModel(r)
	this.TopicName = randStringModel(r)
	this.TopicId = randStringModel(r)
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Courses = make([]*Course, v5)
		for i := 0; i < v5; i++ {
			this.Courses[i] = NewPopulatedCourse(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Metadata = make([]*Metadata, v6)
		for i := 0; i < v6; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 11)
	}
	return this
}

func NewPopulatedCourse(r randyModel, easy bool) *Course {
	this := &Course{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SubjectId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SubjectId *= -1
	}
	this.Name = randStringModel(r)
	this.Number = randStringModel(r)
	if r.Intn(10) != 0 {
		v7 := randStringModel(r)
		this.Synopsis = &v7
	}
	this.TopicName = randStringModel(r)
	this.TopicId = randStringModel(r)
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Sections = make([]*Section, v8)
		for i := 0; i < v8; i++ {
			this.Sections[i] = NewPopulatedSection(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Metadata = make([]*Metadata, v9)
		for i := 0; i < v9; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 10)
	}
	return this
}

func NewPopulatedSection(r randyModel, easy bool) *Section {
	this := &Section{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CourseId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CourseId *= -1
	}
	this.Number = randStringModel(r)
	this.CallNumber = randStringModel(r)
	this.Max = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Max *= -1
	}
	this.Now = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Now *= -1
	}
	this.Status = randStringModel(r)
	this.Credits = randStringModel(r)
	this.TopicName = randStringModel(r)
	this.TopicId = randStringModel(r)
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Meetings = make([]*Meeting, v10)
		for i := 0; i < v10; i++ {
			this.Meetings[i] = NewPopulatedMeeting(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Instructors = make([]*Instructor, v11)
		for i := 0; i < v11; i++ {
			this.Instructors[i] = NewPopulatedInstructor(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Books = make([]*Book, v12)
		for i := 0; i < v12; i++ {
			this.Books[i] = NewPopulatedBook(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Metadata = make([]*Metadata, v13)
		for i := 0; i < v13; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 15)
	}
	return this
}

func NewPopulatedMeeting(r randyModel, easy bool) *Meeting {
	this := &Meeting{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	if r.Intn(10) != 0 {
		v14 := randStringModel(r)
		this.Room = &v14
	}
	if r.Intn(10) != 0 {
		v15 := randStringModel(r)
		this.Day = &v15
	}
	if r.Intn(10) != 0 {
		v16 := randStringModel(r)
		this.StartTime = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringModel(r)
		this.EndTime = &v17
	}
	if r.Intn(10) != 0 {
		v18 := randStringModel(r)
		this.ClassType = &v18
	}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.Metadata = make([]*Metadata, v19)
		for i := 0; i < v19; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 10)
	}
	return this
}

func NewPopulatedInstructor(r randyModel, easy bool) *Instructor {
	this := &Instructor{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	this.Name = randStringModel(r)
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedBook(r randyModel, easy bool) *Book {
	this := &Book{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	this.Title = randStringModel(r)
	this.Url = randStringModel(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedMetadata(r randyModel, easy bool) *Metadata {
	this := &Metadata{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if r.Intn(10) != 0 {
		v20 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.UniversityId = &v20
	}
	if r.Intn(10) != 0 {
		v21 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.SubjectId = &v21
	}
	if r.Intn(10) != 0 {
		v22 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		this.CourseId = &v22
	}
	if r.Intn(10) != 0 {
		v23 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.SectionId = &v23
	}
	if r.Intn(10) != 0 {
		v24 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		this.MeetingId = &v24
	}
	this.Title = randStringModel(r)
	this.Content = randStringModel(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 9)
	}
	return this
}

func NewPopulatedRegistration(r randyModel, easy bool) *Registration {
	this := &Registration{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.UniversityId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UniversityId *= -1
	}
	this.Period = randStringModel(r)
	this.PeriodDate = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.PeriodDate *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedResolvedSemester(r randyModel, easy bool) *ResolvedSemester {
	this := &ResolvedSemester{}
	if r.Intn(10) != 0 {
		this.Current = NewPopulatedSemester(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Last = NewPopulatedSemester(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Next = NewPopulatedSemester(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 4)
	}
	return this
}

func NewPopulatedSemester(r randyModel, easy bool) *Semester {
	this := &Semester{}
	this.Year = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Year *= -1
	}
	this.Season = randStringModel(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedUCTNotification(r randyModel, easy bool) *UCTNotification {
	this := &UCTNotification{}
	this.NotificationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NotificationId *= -1
	}
	this.TopicName = randStringModel(r)
	this.Status = randStringModel(r)
	v25 := NewPopulatedUniversity(r, easy)
	this.University = *v25
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedResponse(r randyModel, easy bool) *Response {
	this := &Response{}
	if r.Intn(10) != 0 {
		this.Meta = NewPopulatedMeta(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Data = NewPopulatedData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedMeta(r randyModel, easy bool) *Meta {
	this := &Meta{}
	if r.Intn(10) != 0 {
		v26 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		this.Code = &v26
	}
	if r.Intn(10) != 0 {
		v27 := randStringModel(r)
		this.Message = &v27
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedData(r randyModel, easy bool) *Data {
	this := &Data{}
	if r.Intn(10) != 0 {
		v28 := r.Intn(5)
		this.Universities = make([]*University, v28)
		for i := 0; i < v28; i++ {
			this.Universities[i] = NewPopulatedUniversity(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.Subjects = make([]*Subject, v29)
		for i := 0; i < v29; i++ {
			this.Subjects[i] = NewPopulatedSubject(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(5)
		this.Courses = make([]*Course, v30)
		for i := 0; i < v30; i++ {
			this.Courses[i] = NewPopulatedCourse(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v31 := r.Intn(5)
		this.Sections = make([]*Section, v31)
		for i := 0; i < v31; i++ {
			this.Sections[i] = NewPopulatedSection(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.University = NewPopulatedUniversity(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Subject = NewPopulatedSubject(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Course = NewPopulatedCourse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Section = NewPopulatedSection(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 9)
	}
	return this
}

type randyModel interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneModel(r randyModel) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringModel(r randyModel) string {
	v32 := r.Intn(100)
	tmps := make([]rune, v32)
	for i := 0; i < v32; i++ {
		tmps[i] = randUTF8RuneModel(r)
	}
	return string(tmps)
}
func randUnrecognizedModel(r randyModel, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldModel(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldModel(data []byte, r randyModel, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateModel(data, uint64(key))
		v33 := r.Int63()
		if r.Intn(2) == 0 {
			v33 *= -1
		}
		data = encodeVarintPopulateModel(data, uint64(v33))
	case 1:
		data = encodeVarintPopulateModel(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateModel(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateModel(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateModel(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateModel(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *University) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Abbr)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.HomePage)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.RegistrationPage)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.MainColor)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.AccentColor)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if m.ResolvedSemesters != nil {
		l = m.ResolvedSemesters.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.AvailableSemesters) > 0 {
		for _, e := range m.AvailableSemesters {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Registrations) > 0 {
		for _, e := range m.Registrations {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Subject) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.UniversityId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Season)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Year)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Course) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SubjectId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	if m.Synopsis != nil {
		l = len(*m.Synopsis)
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Section) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.CourseId))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.CallNumber)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.Max))
	n += 1 + sovModel(uint64(m.Now))
	l = len(m.Status)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Credits)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Meetings) > 0 {
		for _, e := range m.Meetings {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Instructors) > 0 {
		for _, e := range m.Instructors {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Meeting) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	if m.Room != nil {
		l = len(*m.Room)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Day != nil {
		l = len(*m.Day)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.StartTime != nil {
		l = len(*m.StartTime)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.EndTime != nil {
		l = len(*m.EndTime)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.ClassType != nil {
		l = len(*m.ClassType)
		n += 1 + l + sovModel(uint64(l))
	}
	n += 1 + sovModel(uint64(m.Index))
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Instructor) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.Index))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Book) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	l = len(m.Title)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	if m.UniversityId != nil {
		n += 1 + sovModel(uint64(*m.UniversityId))
	}
	if m.SubjectId != nil {
		n += 1 + sovModel(uint64(*m.SubjectId))
	}
	if m.CourseId != nil {
		n += 1 + sovModel(uint64(*m.CourseId))
	}
	if m.SectionId != nil {
		n += 1 + sovModel(uint64(*m.SectionId))
	}
	if m.MeetingId != nil {
		n += 1 + sovModel(uint64(*m.MeetingId))
	}
	l = len(m.Title)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Registration) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.UniversityId))
	l = len(m.Period)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.PeriodDate))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedSemester) Size() (n int) {
	var l int
	_ = l
	if m.Current != nil {
		l = m.Current.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Last != nil {
		l = m.Last.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Semester) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Year))
	l = len(m.Season)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UCTNotification) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.NotificationId))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovModel(uint64(l))
	l = m.University.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Meta) Size() (n int) {
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovModel(uint64(*m.Code))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Data) Size() (n int) {
	var l int
	_ = l
	if len(m.Universities) > 0 {
		for _, e := range m.Universities {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.University != nil {
		l = m.University.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Course != nil {
		l = m.Course.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Section != nil {
		l = m.Section.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *University) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&University{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Abbr:` + fmt.Sprintf("%v", this.Abbr) + `,`,
		`HomePage:` + fmt.Sprintf("%v", this.HomePage) + `,`,
		`RegistrationPage:` + fmt.Sprintf("%v", this.RegistrationPage) + `,`,
		`MainColor:` + fmt.Sprintf("%v", this.MainColor) + `,`,
		`AccentColor:` + fmt.Sprintf("%v", this.AccentColor) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`ResolvedSemesters:` + strings.Replace(fmt.Sprintf("%v", this.ResolvedSemesters), "ResolvedSemester", "ResolvedSemester", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "Subject", "Subject", 1) + `,`,
		`AvailableSemesters:` + strings.Replace(fmt.Sprintf("%v", this.AvailableSemesters), "Semester", "Semester", 1) + `,`,
		`Registrations:` + strings.Replace(fmt.Sprintf("%v", this.Registrations), "Registration", "Registration", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subject{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + fmt.Sprintf("%v", this.UniversityId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Season:` + fmt.Sprintf("%v", this.Season) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Courses:` + strings.Replace(fmt.Sprintf("%v", this.Courses), "Course", "Course", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Course) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Course{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SubjectId:` + fmt.Sprintf("%v", this.SubjectId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Synopsis:` + valueToStringModel(this.Synopsis) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Sections:` + strings.Replace(fmt.Sprintf("%v", this.Sections), "Section", "Section", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Section) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Section{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`CallNumber:` + fmt.Sprintf("%v", this.CallNumber) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`Now:` + fmt.Sprintf("%v", this.Now) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Credits:` + fmt.Sprintf("%v", this.Credits) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Meetings:` + strings.Replace(fmt.Sprintf("%v", this.Meetings), "Meeting", "Meeting", 1) + `,`,
		`Instructors:` + strings.Replace(fmt.Sprintf("%v", this.Instructors), "Instructor", "Instructor", 1) + `,`,
		`Books:` + strings.Replace(fmt.Sprintf("%v", this.Books), "Book", "Book", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Meeting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Meeting{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Room:` + valueToStringModel(this.Room) + `,`,
		`Day:` + valueToStringModel(this.Day) + `,`,
		`StartTime:` + valueToStringModel(this.StartTime) + `,`,
		`EndTime:` + valueToStringModel(this.EndTime) + `,`,
		`ClassType:` + valueToStringModel(this.ClassType) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Metadata", "Metadata", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Instructor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Instructor{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Book) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Book{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + valueToStringModel(this.UniversityId) + `,`,
		`SubjectId:` + valueToStringModel(this.SubjectId) + `,`,
		`CourseId:` + valueToStringModel(this.CourseId) + `,`,
		`SectionId:` + valueToStringModel(this.SectionId) + `,`,
		`MeetingId:` + valueToStringModel(this.MeetingId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Registration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Registration{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + fmt.Sprintf("%v", this.UniversityId) + `,`,
		`Period:` + fmt.Sprintf("%v", this.Period) + `,`,
		`PeriodDate:` + fmt.Sprintf("%v", this.PeriodDate) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolvedSemester) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolvedSemester{`,
		`Current:` + strings.Replace(fmt.Sprintf("%v", this.Current), "Semester", "Semester", 1) + `,`,
		`Last:` + strings.Replace(fmt.Sprintf("%v", this.Last), "Semester", "Semester", 1) + `,`,
		`Next:` + strings.Replace(fmt.Sprintf("%v", this.Next), "Semester", "Semester", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Semester) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Semester{`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Season:` + fmt.Sprintf("%v", this.Season) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UCTNotification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UCTNotification{`,
		`NotificationId:` + fmt.Sprintf("%v", this.NotificationId) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`University:` + strings.Replace(strings.Replace(this.University.String(), "University", "University", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Meta", "Meta", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Data", "Data", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Meta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Meta{`,
		`Code:` + valueToStringModel(this.Code) + `,`,
		`Message:` + valueToStringModel(this.Message) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Universities:` + strings.Replace(fmt.Sprintf("%v", this.Universities), "University", "University", 1) + `,`,
		`Subjects:` + strings.Replace(fmt.Sprintf("%v", this.Subjects), "Subject", "Subject", 1) + `,`,
		`Courses:` + strings.Replace(fmt.Sprintf("%v", this.Courses), "Course", "Course", 1) + `,`,
		`Sections:` + strings.Replace(fmt.Sprintf("%v", this.Sections), "Section", "Section", 1) + `,`,
		`University:` + strings.Replace(fmt.Sprintf("%v", this.University), "University", "University", 1) + `,`,
		`Subject:` + strings.Replace(fmt.Sprintf("%v", this.Subject), "Subject", "Subject", 1) + `,`,
		`Course:` + strings.Replace(fmt.Sprintf("%v", this.Course), "Course", "Course", 1) + `,`,
		`Section:` + strings.Replace(fmt.Sprintf("%v", this.Section), "Section", "Section", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *University) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: University: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: University: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abbr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abbr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationPage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainColor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccentColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccentColor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedSemesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResolvedSemesters == nil {
				m.ResolvedSemesters = &ResolvedSemester{}
			}
			if err := m.ResolvedSemesters.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableSemesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableSemesters = append(m.AvailableSemesters, &Semester{})
			if err := m.AvailableSemesters[len(m.AvailableSemesters)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrations = append(m.Registrations, &Registration{})
			if err := m.Registrations[len(m.Registrations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subject) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			m.UniversityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UniversityId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Season = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Course) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			m.SubjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SubjectId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synopsis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Synopsis = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			m.CourseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CourseId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Max |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credits = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meetings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meetings = append(m.Meetings, &Meeting{})
			if err := m.Meetings[len(m.Meetings)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructors = append(m.Instructors, &Instructor{})
			if err := m.Instructors[len(m.Instructors)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meeting) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meeting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meeting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SectionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Room = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Day = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StartTime = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.EndTime = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ClassType = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instructor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instructor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instructor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SectionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Book) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SectionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniversityId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubjectId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CourseId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SectionId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeetingId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MeetingId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Registration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			m.UniversityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UniversityId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodDate", wireType)
			}
			m.PeriodDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PeriodDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedSemester) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedSemester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedSemester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Current == nil {
				m.Current = &Semester{}
			}
			if err := m.Current.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Last == nil {
				m.Last = &Semester{}
			}
			if err := m.Last.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &Semester{}
			}
			if err := m.Next.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Semester) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Semester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Semester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Year |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Season = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UCTNotification) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UCTNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UCTNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationId", wireType)
			}
			m.NotificationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NotificationId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.University.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Meta{}
			}
			if err := m.Meta.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Data{}
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Universities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Universities = append(m.Universities, &University{})
			if err := m.Universities[len(m.Universities)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.University == nil {
				m.University = &University{}
			}
			if err := m.University.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Course == nil {
				m.Course = &Course{}
			}
			if err := m.Course.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Section == nil {
				m.Section = &Section{}
			}
			if err := m.Section.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x57, 0xbd, 0x73, 0xe3, 0x44,
	0x14, 0x3f, 0x59, 0xf2, 0xd7, 0xb3, 0x1d, 0x27, 0x4a, 0xb8, 0xe8, 0x2e, 0xe4, 0x83, 0x65, 0x72,
	0xc0, 0x91, 0x0b, 0xcc, 0xdd, 0x0c, 0x33, 0x50, 0x31, 0x3e, 0x1a, 0x8a, 0x63, 0x18, 0x8e, 0x6b,
	0x68, 0x3c, 0xb2, 0xbc, 0x04, 0x81, 0xa5, 0xf5, 0x48, 0xeb, 0x90, 0x74, 0x94, 0x34, 0xf4, 0xcc,
	0xc0, 0x1f, 0x00, 0xff, 0x01, 0x05, 0x05, 0xe5, 0x95, 0x0c, 0x15, 0x34, 0x99, 0xdc, 0x95, 0x54,
	0x0c, 0x15, 0x25, 0xbb, 0x6f, 0x57, 0xd2, 0x2a, 0x96, 0x13, 0x17, 0x97, 0x62, 0x67, 0xec, 0xf7,
	0xfb, 0xed, 0xea, 0xe9, 0xf7, 0x3e, 0xf6, 0x09, 0x3a, 0x11, 0x1b, 0xd3, 0xc9, 0xe1, 0x34, 0x61,
	0x9c, 0xb9, 0x75, 0xfc, 0x73, 0x1b, 0x8e, 0xd8, 0x11, 0x53, 0x26, 0xf2, 0x97, 0x03, 0xf0, 0x24,
	0x0e, 0x8f, 0x69, 0x92, 0x86, 0xfc, 0xd4, 0xdd, 0x82, 0x5a, 0x38, 0xf6, 0xac, 0x3d, 0xeb, 0x75,
	0x7b, 0xd0, 0x7f, 0x7a, 0xb6, 0x7b, 0xe3, 0xdf, 0xb3, 0xdd, 0xe6, 0x78, 0xf4, 0x1e, 0x09, 0xc7,
	0xc4, 0xdd, 0x05, 0x27, 0xf6, 0x23, 0xea, 0xd5, 0x04, 0xdc, 0x1e, 0xac, 0x69, 0xb8, 0x2d, 0x61,
	0x69, 0x47, 0x82, 0x3f, 0x1a, 0x25, 0x9e, 0x3d, 0x4f, 0x90, 0x76, 0xe2, 0xbe, 0x01, 0xed, 0x2f,
	0x58, 0x44, 0x87, 0x53, 0xff, 0x88, 0x7a, 0x0e, 0xb2, 0x6e, 0x6a, 0xd6, 0x8a, 0x64, 0xe5, 0x20,
	0x71, 0xdf, 0x85, 0xb5, 0x84, 0x1e, 0x85, 0x29, 0x4f, 0x7c, 0x1e, 0xb2, 0x58, 0x6d, 0xa9, 0xe3,
	0x96, 0x1d, 0xbd, 0xe5, 0xa6, 0xdc, 0x32, 0x47, 0x22, 0xee, 0x9b, 0x00, 0x91, 0x1f, 0xc6, 0xc3,
	0x80, 0x4d, 0x58, 0xe2, 0x35, 0x70, 0xcf, 0xa6, 0xde, 0xd3, 0x97, 0x7b, 0x0a, 0x94, 0xb8, 0x6f,
	0x41, 0xd7, 0x0f, 0x02, 0x1a, 0x73, 0x4d, 0x6f, 0x22, 0xfd, 0x96, 0xa6, 0xaf, 0xa1, 0xef, 0x06,
	0x8e, 0xa7, 0x73, 0x36, 0x0d, 0x83, 0x21, 0x6a, 0xd1, 0x9a, 0x3f, 0xbd, 0x40, 0x89, 0xfb, 0x1a,
	0xb4, 0xd4, 0x5f, 0xa1, 0x6a, 0x1b, 0xa9, 0x2f, 0x69, 0x6a, 0xaf, 0xa0, 0x4a, 0x6d, 0x1f, 0x80,
	0x9b, 0xd0, 0x94, 0x4d, 0x8e, 0xe9, 0x78, 0x98, 0xd2, 0x88, 0xa6, 0x5c, 0x44, 0xc4, 0x03, 0xb1,
	0xa5, 0x73, 0x7f, 0xf3, 0x50, 0x05, 0xf1, 0x13, 0x4d, 0x78, 0xac, 0x71, 0x77, 0x0f, 0x5a, 0xe9,
	0x6c, 0xf4, 0x25, 0x0d, 0x78, 0xea, 0x75, 0xf6, 0x6c, 0x41, 0x5d, 0xd1, 0xd4, 0xc7, 0xca, 0xec,
	0x1e, 0xc0, 0xba, 0x7f, 0xec, 0x87, 0x13, 0x7f, 0x34, 0xa1, 0xc6, 0xb9, 0x5d, 0x24, 0xf7, 0x33,
	0x72, 0x76, 0xde, 0x5d, 0xe8, 0x99, 0x72, 0xa6, 0x5e, 0x0f, 0x79, 0xeb, 0xf9, 0xf3, 0x0b, 0xcc,
	0x7d, 0x05, 0x5a, 0x11, 0xe5, 0xfe, 0xd8, 0xe7, 0xbe, 0xb7, 0x52, 0x3a, 0xee, 0x91, 0x36, 0x93,
	0x6f, 0x6d, 0x68, 0x66, 0x8e, 0xec, 0x19, 0x89, 0xb5, 0x21, 0x25, 0xf8, 0xfb, 0x6c, 0xd7, 0xba,
	0x67, 0x66, 0xd7, 0x3b, 0xd0, 0x9b, 0xe5, 0x89, 0x28, 0xf5, 0xaa, 0x21, 0x79, 0xd7, 0x24, 0xbb,
	0x92, 0x5c, 0x62, 0x15, 0x59, 0x69, 0x2f, 0xca, 0xca, 0x57, 0xa1, 0x11, 0xcf, 0xa2, 0x11, 0x4d,
	0x74, 0xc6, 0xad, 0x6b, 0x4a, 0x07, 0x29, 0x88, 0x20, 0x29, 0xa5, 0x7e, 0xca, 0x62, 0x9d, 0x63,
	0x25, 0x92, 0x42, 0xf0, 0x51, 0xa7, 0xd4, 0xcf, 0x52, 0xaa, 0xf4, 0x28, 0x69, 0xbf, 0x98, 0x1b,
	0xcd, 0xe5, 0x73, 0xa3, 0x75, 0x59, 0x6e, 0xec, 0x40, 0x33, 0x60, 0xb3, 0x24, 0xa5, 0xa9, 0xc8,
	0x21, 0xa9, 0x74, 0x4f, 0x2b, 0xfd, 0x10, 0xad, 0xa5, 0x50, 0x40, 0x75, 0x28, 0x9e, 0xd7, 0xa0,
	0xa1, 0xd9, 0x57, 0x47, 0xe2, 0x6d, 0x00, 0x9d, 0x56, 0x45, 0x18, 0x5e, 0x36, 0x99, 0xf8, 0x2a,
	0x05, 0xe5, 0xc5, 0xc5, 0xa0, 0x95, 0x9e, 0xc6, 0x6c, 0x9a, 0x86, 0xa9, 0x8e, 0xc2, 0x5a, 0x26,
	0x46, 0x66, 0xbf, 0x28, 0x71, 0x63, 0x79, 0x89, 0x9b, 0x97, 0x49, 0x2c, 0x2b, 0x49, 0xbc, 0x0c,
	0x26, 0x7d, 0xab, 0x5c, 0x49, 0xca, 0x5c, 0x12, 0xb9, 0x5d, 0x2d, 0xf2, 0xf7, 0x8e, 0xc8, 0x77,
	0x4d, 0xbf, 0x5a, 0xe5, 0x43, 0x68, 0xab, 0xa8, 0x16, 0x22, 0x6f, 0x99, 0x44, 0x6c, 0x88, 0x39,
	0xc3, 0x94, 0xd0, 0x5e, 0x2c, 0xe1, 0x3d, 0xe8, 0x04, 0xfe, 0x64, 0x32, 0x2c, 0x89, 0xed, 0x69,
	0xe6, 0x2a, 0x9e, 0x58, 0xc0, 0xc4, 0xdd, 0x06, 0x3b, 0xf2, 0x4f, 0x50, 0x6c, 0x7b, 0xb0, 0xaa,
	0x69, 0x2d, 0xd5, 0x22, 0x4f, 0x10, 0x8e, 0xd9, 0xd7, 0x28, 0xf2, 0x05, 0x58, 0x98, 0x55, 0xcd,
	0x70, 0x9f, 0xcf, 0x52, 0xad, 0x6d, 0xb9, 0x66, 0x10, 0x21, 0xee, 0xbe, 0x48, 0xde, 0x84, 0x8e,
	0x43, 0x9e, 0xea, 0x24, 0xdf, 0xd0, 0xac, 0x2e, 0x7a, 0xa3, 0xa0, 0x8b, 0x61, 0x6d, 0x2f, 0x1f,
	0x56, 0xb8, 0x22, 0xac, 0x11, 0xa5, 0x3c, 0x8c, 0x8f, 0x2e, 0x36, 0xc8, 0x47, 0xca, 0xec, 0xde,
	0x81, 0x4e, 0x18, 0x8b, 0xa6, 0x36, 0x0b, 0x38, 0xcb, 0x1b, 0xe3, 0x9a, 0x26, 0x7d, 0x98, 0x23,
	0xee, 0x6d, 0xa8, 0x8f, 0x18, 0xfb, 0x2a, 0x6b, 0x89, 0x1d, 0xcd, 0x18, 0x08, 0xdb, 0x32, 0xad,
	0xf0, 0x8f, 0x1a, 0x34, 0xb3, 0x47, 0x2e, 0x57, 0x80, 0x2a, 0x8f, 0x2e, 0x2d, 0xc0, 0x9c, 0x42,
	0xc4, 0xbd, 0xed, 0x24, 0x8c, 0x45, 0x3a, 0x35, 0x7a, 0x59, 0xf1, 0x49, 0x1b, 0x71, 0x6f, 0x81,
	0x3d, 0xf6, 0x4f, 0x75, 0x32, 0x74, 0xb3, 0x10, 0x0a, 0x93, 0x54, 0x12, 0x44, 0xa0, 0x12, 0x3e,
	0xe4, 0x61, 0x94, 0x5d, 0xaf, 0xeb, 0xf9, 0x03, 0x72, 0x04, 0x6b, 0x93, 0xc6, 0x63, 0x45, 0x6b,
	0x94, 0x6b, 0x33, 0xb3, 0xe3, 0x69, 0xc1, 0xc4, 0x4f, 0xd3, 0x21, 0x3f, 0x9d, 0x66, 0xed, 0x2f,
	0x3f, 0xad, 0x40, 0x88, 0x50, 0xac, 0x1e, 0xc6, 0x63, 0x7a, 0x82, 0x29, 0x51, 0x1f, 0xb8, 0x3a,
	0x7a, 0x80, 0x02, 0x48, 0x80, 0x2c, 0x53, 0x6f, 0x3f, 0x5b, 0x00, 0x46, 0x88, 0xae, 0x43, 0xd7,
	0x2b, 0x1b, 0xdb, 0x9d, 0xec, 0x4d, 0x1c, 0x7c, 0x93, 0x4d, 0xf3, 0x34, 0xe3, 0x75, 0xc8, 0x8f,
	0x16, 0x38, 0x98, 0x2c, 0xd7, 0xe1, 0xa5, 0x90, 0x93, 0x87, 0x7c, 0x92, 0xb9, 0x59, 0x92, 0x13,
	0x01, 0x2c, 0xe5, 0x59, 0x32, 0xd1, 0x39, 0x50, 0x2a, 0x65, 0x61, 0x26, 0xe4, 0xbc, 0x06, 0xad,
	0x4c, 0xd7, 0x25, 0x5c, 0xbc, 0x5f, 0x7d, 0x57, 0x6f, 0x5d, 0x76, 0x4f, 0x1f, 0x94, 0x6e, 0x15,
	0x1b, 0x37, 0x78, 0x0b, 0x6f, 0x94, 0xbb, 0x66, 0x77, 0x74, 0x90, 0xbc, 0xb9, 0xa8, 0x33, 0x1e,
	0x94, 0x04, 0xab, 0x57, 0x9d, 0x6c, 0x88, 0x25, 0xd8, 0xba, 0x27, 0x48, 0x76, 0xa3, 0x82, 0x5d,
	0xc0, 0x86, 0xb4, 0xcd, 0x85, 0xd2, 0xca, 0x0e, 0xc7, 0x62, 0x2e, 0x46, 0xc4, 0xca, 0x0e, 0xa7,
	0x20, 0x42, 0x7e, 0xb5, 0xa0, 0x5b, 0x9a, 0xa0, 0xae, 0x6f, 0x24, 0x12, 0x8d, 0x79, 0x4a, 0x93,
	0x90, 0x8d, 0xab, 0xae, 0x0a, 0x85, 0xe0, 0x55, 0xa1, 0x7e, 0x0e, 0x45, 0xd0, 0xa9, 0xd6, 0xb8,
	0x74, 0x55, 0x18, 0x30, 0x21, 0x09, 0xac, 0x56, 0xcc, 0x9f, 0xcd, 0x60, 0x96, 0x24, 0xf2, 0xcd,
	0x2d, 0x9c, 0x54, 0xe7, 0x26, 0xca, 0x6d, 0x70, 0x44, 0xd9, 0x73, 0x74, 0xbc, 0x1a, 0x8e, 0xe9,
	0x09, 0x47, 0x37, 0xe7, 0x61, 0xf2, 0x31, 0xb4, 0x72, 0x6a, 0x36, 0x7b, 0x59, 0x58, 0x67, 0x15,
	0xb3, 0x57, 0x31, 0xc1, 0xd5, 0x16, 0x4e, 0x70, 0xe4, 0x3b, 0x0b, 0xfa, 0x4f, 0x1e, 0x7e, 0xfa,
	0x11, 0xe3, 0xe1, 0xe7, 0x61, 0xa0, 0xe2, 0xb0, 0x0d, 0xfd, 0xd8, 0xf8, 0x3f, 0xcc, 0x83, 0xe2,
	0xc8, 0x13, 0x5c, 0xaf, 0x74, 0x33, 0xa9, 0xb3, 0x15, 0xb2, 0x91, 0xdf, 0x7f, 0xb6, 0x61, 0x15,
	0x37, 0x59, 0x11, 0x0e, 0x94, 0xb5, 0xb8, 0x50, 0x8a, 0x2f, 0x2d, 0x45, 0x26, 0xef, 0x43, 0x4b,
	0xa8, 0x3a, 0x15, 0x63, 0x07, 0x15, 0x6d, 0xda, 0x91, 0x1d, 0x4f, 0x4b, 0xd9, 0x31, 0xba, 0x9d,
	0x84, 0xb0, 0x11, 0xd6, 0x4a, 0xd0, 0x07, 0xb2, 0x09, 0xee, 0x83, 0x83, 0x94, 0x2e, 0x38, 0x81,
	0xb0, 0x2a, 0x7d, 0xdc, 0x3e, 0x34, 0x85, 0x6e, 0xa9, 0xfc, 0x66, 0x42, 0x8f, 0xc9, 0x0f, 0x35,
	0x70, 0x24, 0x5f, 0xf4, 0xe8, 0x6e, 0xee, 0x5e, 0x28, 0x26, 0x4a, 0xab, 0x74, 0xe3, 0x19, 0x9f,
	0x82, 0xe6, 0xc7, 0x45, 0xad, 0xf2, 0xe3, 0xc2, 0x98, 0x4b, 0xed, 0xaa, 0xb9, 0xd4, 0x1c, 0xaa,
	0x9c, 0xca, 0xa1, 0x6a, 0xbf, 0xa4, 0x55, 0x7d, 0x81, 0x56, 0x22, 0xf6, 0x4d, 0xed, 0x0a, 0xd6,
	0xeb, 0xbc, 0x27, 0xdb, 0xd0, 0x50, 0x9e, 0x60, 0x99, 0xce, 0x39, 0x22, 0xf7, 0xab, 0x27, 0x62,
	0x85, 0xce, 0xf9, 0x31, 0x78, 0xf0, 0xe7, 0xb3, 0x9d, 0x1b, 0xe7, 0xcf, 0x76, 0xac, 0x7f, 0xc4,
	0xfa, 0x4f, 0xac, 0x6f, 0x9e, 0xef, 0x58, 0x3f, 0x89, 0xf5, 0x8b, 0x58, 0xbf, 0x89, 0xf5, 0x54,
	0xac, 0xdf, 0xc5, 0x3a, 0x17, 0xeb, 0x33, 0xf5, 0x19, 0xfd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x61, 0xde, 0xf0, 0xdf, 0x5b, 0x0f, 0x00, 0x00,
}
