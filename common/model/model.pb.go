// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/model/model.proto

package model

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type University struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id" json:"id" db:"id"`
	Name                 string            `protobuf:"bytes,2,opt,name=name" json:"name" db:"name"`
	Abbr                 string            `protobuf:"bytes,3,opt,name=abbr" json:"abbr" db:"abbr"`
	HomePage             string            `protobuf:"bytes,4,opt,name=home_page,json=homePage" json:"home_page" db:"home_page"`
	RegistrationPage     string            `protobuf:"bytes,5,opt,name=registration_page,json=registrationPage" json:"registration_page" db:"registration_page"`
	MainColor            string            `protobuf:"bytes,6,opt,name=main_color,json=mainColor" json:"main_color" db:"main_color"`
	AccentColor          string            `protobuf:"bytes,7,opt,name=accent_color,json=accentColor" json:"accent_color" db:"accent_color"`
	TopicName            string            `protobuf:"bytes,8,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name"`
	TopicId              string            `protobuf:"bytes,9,opt,name=topic_id,json=topicId" json:"topic_id" db:"topic_id"`
	ResolvedSemesters    *ResolvedSemester `protobuf:"bytes,10,opt,name=resolved_semesters,json=resolvedSemesters" json:"resolved_semesters,omitempty"`
	Subjects             []*Subject        `protobuf:"bytes,11,rep,name=subjects" json:"subjects,omitempty"`
	AvailableSemesters   []*Semester       `protobuf:"bytes,12,rep,name=available_semesters,json=availableSemesters" json:"available_semesters,omitempty"`
	Registrations        []*Registration   `protobuf:"bytes,13,rep,name=registrations" json:"registrations,omitempty"`
	Metadata             []*Metadata       `protobuf:"bytes,14,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *University) Reset()      { *m = University{} }
func (*University) ProtoMessage() {}
func (*University) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{0}
}
func (m *University) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *University) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_University.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *University) XXX_Merge(src proto.Message) {
	xxx_messageInfo_University.Merge(m, src)
}
func (m *University) XXX_Size() int {
	return m.Size()
}
func (m *University) XXX_DiscardUnknown() {
	xxx_messageInfo_University.DiscardUnknown(m)
}

var xxx_messageInfo_University proto.InternalMessageInfo

func (m *University) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *University) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *University) GetAbbr() string {
	if m != nil {
		return m.Abbr
	}
	return ""
}

func (m *University) GetHomePage() string {
	if m != nil {
		return m.HomePage
	}
	return ""
}

func (m *University) GetRegistrationPage() string {
	if m != nil {
		return m.RegistrationPage
	}
	return ""
}

func (m *University) GetMainColor() string {
	if m != nil {
		return m.MainColor
	}
	return ""
}

func (m *University) GetAccentColor() string {
	if m != nil {
		return m.AccentColor
	}
	return ""
}

func (m *University) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *University) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *University) GetResolvedSemesters() *ResolvedSemester {
	if m != nil {
		return m.ResolvedSemesters
	}
	return nil
}

func (m *University) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *University) GetAvailableSemesters() []*Semester {
	if m != nil {
		return m.AvailableSemesters
	}
	return nil
}

func (m *University) GetRegistrations() []*Registration {
	if m != nil {
		return m.Registrations
	}
	return nil
}

func (m *University) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Subject struct {
	Id                   int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId         int64       `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"-" db:"university_id"`
	Name                 string      `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Number               string      `protobuf:"bytes,4,opt,name=number" json:"number" db:"number"`
	Season               string      `protobuf:"bytes,5,opt,name=season" json:"season" db:"season"`
	Year                 string      `protobuf:"bytes,6,opt,name=year" json:"year" db:"year"`
	TopicName            string      `protobuf:"bytes,7,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name"`
	TopicId              string      `protobuf:"bytes,8,opt,name=topic_id,json=topicId" json:"topic_id" db:"topic_id"`
	Courses              []*Course   `protobuf:"bytes,9,rep,name=courses" json:"courses,omitempty"`
	Metadata             []*Metadata `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Subject) Reset()      { *m = Subject{} }
func (*Subject) ProtoMessage() {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{1}
}
func (m *Subject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return m.Size()
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

func (m *Subject) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Subject) GetUniversityId() int64 {
	if m != nil {
		return m.UniversityId
	}
	return 0
}

func (m *Subject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subject) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Subject) GetSeason() string {
	if m != nil {
		return m.Season
	}
	return ""
}

func (m *Subject) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *Subject) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Subject) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Subject) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *Subject) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Course struct {
	Id                   int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SubjectId            int64       `protobuf:"varint,2,opt,name=subject_id,json=subjectId" json:"-" db:"subject_id"`
	Name                 string      `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Number               string      `protobuf:"bytes,4,opt,name=number" json:"number" db:"number"`
	Synopsis             *string     `protobuf:"bytes,5,opt,name=synopsis" json:"synopsis,omitempty" db:"synopsis"`
	TopicName            string      `protobuf:"bytes,6,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name"`
	TopicId              string      `protobuf:"bytes,7,opt,name=topic_id,json=topicId" json:"topic_id" db:"topic_id"`
	Sections             []*Section  `protobuf:"bytes,8,rep,name=sections" json:"sections,omitempty"`
	Metadata             []*Metadata `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Course) Reset()      { *m = Course{} }
func (*Course) ProtoMessage() {}
func (*Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{2}
}
func (m *Course) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Course.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Course.Merge(m, src)
}
func (m *Course) XXX_Size() int {
	return m.Size()
}
func (m *Course) XXX_DiscardUnknown() {
	xxx_messageInfo_Course.DiscardUnknown(m)
}

var xxx_messageInfo_Course proto.InternalMessageInfo

func (m *Course) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Course) GetSubjectId() int64 {
	if m != nil {
		return m.SubjectId
	}
	return 0
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Course) GetSynopsis() string {
	if m != nil && m.Synopsis != nil {
		return *m.Synopsis
	}
	return ""
}

func (m *Course) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Course) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Course) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Course) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Section struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	CourseId             int64         `protobuf:"varint,2,opt,name=course_id,json=courseId" json:"-" db:"course_id"`
	Number               string        `protobuf:"bytes,3,opt,name=number" json:"number" db:"number"`
	CallNumber           string        `protobuf:"bytes,4,opt,name=call_number,json=callNumber" json:"call_number" db:"call_number"`
	Max                  int64         `protobuf:"varint,5,opt,name=max" json:"max" db:"max"`
	Now                  int64         `protobuf:"varint,6,opt,name=now" json:"now" db:"now"`
	Status               string        `protobuf:"bytes,7,opt,name=status" json:"status" db:"status"`
	Credits              string        `protobuf:"bytes,8,opt,name=credits" json:"credits" db:"credits"`
	TopicName            string        `protobuf:"bytes,9,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name"`
	TopicId              string        `protobuf:"bytes,10,opt,name=topic_id,json=topicId" json:"topic_id" db:"topic_id"`
	Meetings             []*Meeting    `protobuf:"bytes,11,rep,name=meetings" json:"meetings,omitempty"`
	Instructors          []*Instructor `protobuf:"bytes,12,rep,name=instructors" json:"instructors,omitempty"`
	Books                []*Book       `protobuf:"bytes,13,rep,name=books" json:"books,omitempty"`
	Metadata             []*Metadata   `protobuf:"bytes,14,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Section) Reset()      { *m = Section{} }
func (*Section) ProtoMessage() {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{3}
}
func (m *Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return m.Size()
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Section) GetCourseId() int64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *Section) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Section) GetCallNumber() string {
	if m != nil {
		return m.CallNumber
	}
	return ""
}

func (m *Section) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Section) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Section) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Section) GetCredits() string {
	if m != nil {
		return m.Credits
	}
	return ""
}

func (m *Section) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Section) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Section) GetMeetings() []*Meeting {
	if m != nil {
		return m.Meetings
	}
	return nil
}

func (m *Section) GetInstructors() []*Instructor {
	if m != nil {
		return m.Instructors
	}
	return nil
}

func (m *Section) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

func (m *Section) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Meeting struct {
	Id                   int64       `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId            int64       `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"-" db:"section_id"`
	Room                 *string     `protobuf:"bytes,3,opt,name=room" json:"room,omitempty" db:"room"`
	Day                  *string     `protobuf:"bytes,4,opt,name=day" json:"day,omitempty" db:"day"`
	StartTime            *string     `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty" db:"start_time"`
	EndTime              *string     `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty" db:"end_time"`
	ClassType            *string     `protobuf:"bytes,7,opt,name=class_type,json=classType" json:"class_type,omitempty" db:"class_type"`
	Index                int32       `protobuf:"varint,8,opt,name=index" json:"index" db:"index"`
	Metadata             []*Metadata `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Meeting) Reset()      { *m = Meeting{} }
func (*Meeting) ProtoMessage() {}
func (*Meeting) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{4}
}
func (m *Meeting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meeting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Meeting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Meeting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meeting.Merge(m, src)
}
func (m *Meeting) XXX_Size() int {
	return m.Size()
}
func (m *Meeting) XXX_DiscardUnknown() {
	xxx_messageInfo_Meeting.DiscardUnknown(m)
}

var xxx_messageInfo_Meeting proto.InternalMessageInfo

func (m *Meeting) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Meeting) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Meeting) GetRoom() string {
	if m != nil && m.Room != nil {
		return *m.Room
	}
	return ""
}

func (m *Meeting) GetDay() string {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return ""
}

func (m *Meeting) GetStartTime() string {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return ""
}

func (m *Meeting) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func (m *Meeting) GetClassType() string {
	if m != nil && m.ClassType != nil {
		return *m.ClassType
	}
	return ""
}

func (m *Meeting) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Meeting) GetMetadata() []*Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Instructor struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId            int64    `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"-" db:"section_id"`
	Name                 string   `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	Index                int32    `protobuf:"varint,4,opt,name=index" json:"-" db:"index"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instructor) Reset()      { *m = Instructor{} }
func (*Instructor) ProtoMessage() {}
func (*Instructor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{5}
}
func (m *Instructor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instructor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instructor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instructor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instructor.Merge(m, src)
}
func (m *Instructor) XXX_Size() int {
	return m.Size()
}
func (m *Instructor) XXX_DiscardUnknown() {
	xxx_messageInfo_Instructor.DiscardUnknown(m)
}

var xxx_messageInfo_Instructor proto.InternalMessageInfo

func (m *Instructor) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Instructor) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Instructor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instructor) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Book struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	SectionId            int64    `protobuf:"varint,2,opt,name=section_id,json=sectionId" json:"-" db:"section_id"`
	Title                string   `protobuf:"bytes,3,opt,name=title" json:"title" db:"title"`
	Url                  string   `protobuf:"bytes,4,opt,name=url" json:"url" db:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()      { *m = Book{} }
func (*Book) ProtoMessage() {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{6}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetSectionId() int64 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Metadata struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId         *int64   `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"-" db:"university_id"`
	SubjectId            *int64   `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"-" db:"subject_id"`
	CourseId             *int64   `protobuf:"varint,4,opt,name=course_id,json=courseId" json:"-" db:"course_id"`
	SectionId            *int64   `protobuf:"varint,5,opt,name=section_id,json=sectionId" json:"-" db:"section_id"`
	MeetingId            *int64   `protobuf:"varint,6,opt,name=meeting_id,json=meetingId" json:"-" db:"meeting_id"`
	Title                string   `protobuf:"bytes,7,opt,name=title" json:"title" db:"title"`
	Content              string   `protobuf:"bytes,8,opt,name=content" json:"content" db:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{7}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Metadata) GetUniversityId() int64 {
	if m != nil && m.UniversityId != nil {
		return *m.UniversityId
	}
	return 0
}

func (m *Metadata) GetSubjectId() int64 {
	if m != nil && m.SubjectId != nil {
		return *m.SubjectId
	}
	return 0
}

func (m *Metadata) GetCourseId() int64 {
	if m != nil && m.CourseId != nil {
		return *m.CourseId
	}
	return 0
}

func (m *Metadata) GetSectionId() int64 {
	if m != nil && m.SectionId != nil {
		return *m.SectionId
	}
	return 0
}

func (m *Metadata) GetMeetingId() int64 {
	if m != nil && m.MeetingId != nil {
		return *m.MeetingId
	}
	return 0
}

func (m *Metadata) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Metadata) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Registration struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UniversityId         int64    `protobuf:"varint,2,opt,name=university_id,json=universityId" json:"-" db:"university_id"`
	Period               string   `protobuf:"bytes,3,opt,name=period" json:"period" db:"period"`
	PeriodDate           int64    `protobuf:"varint,4,opt,name=period_date,json=periodDate" json:"period_date" db:"period_date"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Registration) Reset()      { *m = Registration{} }
func (*Registration) ProtoMessage() {}
func (*Registration) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{8}
}
func (m *Registration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Registration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Registration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Registration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registration.Merge(m, src)
}
func (m *Registration) XXX_Size() int {
	return m.Size()
}
func (m *Registration) XXX_DiscardUnknown() {
	xxx_messageInfo_Registration.DiscardUnknown(m)
}

var xxx_messageInfo_Registration proto.InternalMessageInfo

func (m *Registration) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Registration) GetUniversityId() int64 {
	if m != nil {
		return m.UniversityId
	}
	return 0
}

func (m *Registration) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Registration) GetPeriodDate() int64 {
	if m != nil {
		return m.PeriodDate
	}
	return 0
}

type ResolvedSemester struct {
	Current              *Semester `protobuf:"bytes,1,opt,name=current" json:"current,omitempty"`
	Last                 *Semester `protobuf:"bytes,2,opt,name=last" json:"last,omitempty"`
	Next                 *Semester `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResolvedSemester) Reset()      { *m = ResolvedSemester{} }
func (*ResolvedSemester) ProtoMessage() {}
func (*ResolvedSemester) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{9}
}
func (m *ResolvedSemester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedSemester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolvedSemester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolvedSemester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedSemester.Merge(m, src)
}
func (m *ResolvedSemester) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedSemester) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedSemester.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedSemester proto.InternalMessageInfo

func (m *ResolvedSemester) GetCurrent() *Semester {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *ResolvedSemester) GetLast() *Semester {
	if m != nil {
		return m.Last
	}
	return nil
}

func (m *ResolvedSemester) GetNext() *Semester {
	if m != nil {
		return m.Next
	}
	return nil
}

type Semester struct {
	Year                 int32    `protobuf:"varint,1,opt,name=year" json:"year" db:"year"`
	Season               string   `protobuf:"bytes,2,opt,name=season" json:"season" db:"season"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Semester) Reset()      { *m = Semester{} }
func (*Semester) ProtoMessage() {}
func (*Semester) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{10}
}
func (m *Semester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Semester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Semester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Semester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Semester.Merge(m, src)
}
func (m *Semester) XXX_Size() int {
	return m.Size()
}
func (m *Semester) XXX_DiscardUnknown() {
	xxx_messageInfo_Semester.DiscardUnknown(m)
}

var xxx_messageInfo_Semester proto.InternalMessageInfo

func (m *Semester) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Semester) GetSeason() string {
	if m != nil {
		return m.Season
	}
	return ""
}

type UCTNotification struct {
	NotificationId       int64      `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id"`
	TopicName            string     `protobuf:"bytes,2,opt,name=topic_name,json=topicName" json:"topic_name"`
	Status               string     `protobuf:"bytes,3,opt,name=status" json:"status"`
	University           University `protobuf:"bytes,4,opt,name=university" json:"university"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UCTNotification) Reset()      { *m = UCTNotification{} }
func (*UCTNotification) ProtoMessage() {}
func (*UCTNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{11}
}
func (m *UCTNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UCTNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UCTNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UCTNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UCTNotification.Merge(m, src)
}
func (m *UCTNotification) XXX_Size() int {
	return m.Size()
}
func (m *UCTNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_UCTNotification.DiscardUnknown(m)
}

var xxx_messageInfo_UCTNotification proto.InternalMessageInfo

func (m *UCTNotification) GetNotificationId() int64 {
	if m != nil {
		return m.NotificationId
	}
	return 0
}

func (m *UCTNotification) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *UCTNotification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UCTNotification) GetUniversity() University {
	if m != nil {
		return m.University
	}
	return University{}
}

type Response struct {
	Meta                 *Meta    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data                 *Data    `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{12}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Response) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Meta struct {
	Code                 *int32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message              *string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()      { *m = Meta{} }
func (*Meta) ProtoMessage() {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{13}
}
func (m *Meta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return m.Size()
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Meta) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Data struct {
	Universities         []*University       `protobuf:"bytes,1,rep,name=universities" json:"universities,omitempty"`
	Subjects             []*Subject          `protobuf:"bytes,2,rep,name=subjects" json:"subjects,omitempty"`
	Courses              []*Course           `protobuf:"bytes,3,rep,name=courses" json:"courses,omitempty"`
	Sections             []*Section          `protobuf:"bytes,4,rep,name=sections" json:"sections,omitempty"`
	University           *University         `protobuf:"bytes,5,opt,name=university" json:"university,omitempty"`
	Subject              *Subject            `protobuf:"bytes,6,opt,name=subject" json:"subject,omitempty"`
	Course               *Course             `protobuf:"bytes,7,opt,name=course" json:"course,omitempty"`
	Section              *Section            `protobuf:"bytes,8,opt,name=section" json:"section,omitempty"`
	SubscriptionView     []*SubscriptionView `protobuf:"bytes,9,rep,name=subscription_view,json=subscriptionView" json:"subscription_view,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{14}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetUniversities() []*University {
	if m != nil {
		return m.Universities
	}
	return nil
}

func (m *Data) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *Data) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *Data) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Data) GetUniversity() *University {
	if m != nil {
		return m.University
	}
	return nil
}

func (m *Data) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Data) GetCourse() *Course {
	if m != nil {
		return m.Course
	}
	return nil
}

func (m *Data) GetSection() *Section {
	if m != nil {
		return m.Section
	}
	return nil
}

func (m *Data) GetSubscriptionView() []*SubscriptionView {
	if m != nil {
		return m.SubscriptionView
	}
	return nil
}

type Subscription struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id" db:"id" firestore:"id"`
	Os                   string   `protobuf:"bytes,2,opt,name=os" json:"os" db:"os" firestore:"os"`
	IsSubscribed         string   `protobuf:"bytes,3,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed" db:"is_subscribed" firestore:"is_subscribed"`
	TopicName            string   `protobuf:"bytes,4,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name" firestore:"topic_name"`
	FcmToken             string   `protobuf:"bytes,5,opt,name=fcm_token,json=fcmToken" json:"fcm_token" db:"fcm_token" firestore:"fcm_token"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at" db:"created_at" firestore:"created_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscription) Reset()      { *m = Subscription{} }
func (*Subscription) ProtoMessage() {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{15}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subscription) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Subscription) GetIsSubscribed() string {
	if m != nil {
		return m.IsSubscribed
	}
	return ""
}

func (m *Subscription) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Subscription) GetFcmToken() string {
	if m != nil {
		return m.FcmToken
	}
	return ""
}

func (m *Subscription) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type SubscriptionView struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topic_name,json=topicName" json:"topic_name" db:"topic_name" firestore:"topic_name"`
	Subscribers          int64    `protobuf:"varint,2,opt,name=subscribers" json:"subscribers" db:"subscribers" firestore:"subscribers"`
	IsHot                bool     `protobuf:"varint,3,opt,name=is_hot,json=isHot" json:"is_hot" db:"is_hot" firestore:"is_hot"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionView) Reset()      { *m = SubscriptionView{} }
func (*SubscriptionView) ProtoMessage() {}
func (*SubscriptionView) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ad522f3927c3aa3, []int{16}
}
func (m *SubscriptionView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionView.Merge(m, src)
}
func (m *SubscriptionView) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionView) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionView.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionView proto.InternalMessageInfo

func (m *SubscriptionView) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *SubscriptionView) GetSubscribers() int64 {
	if m != nil {
		return m.Subscribers
	}
	return 0
}

func (m *SubscriptionView) GetIsHot() bool {
	if m != nil {
		return m.IsHot
	}
	return false
}

func init() {
	proto.RegisterType((*University)(nil), "model.University")
	proto.RegisterType((*Subject)(nil), "model.Subject")
	proto.RegisterType((*Course)(nil), "model.Course")
	proto.RegisterType((*Section)(nil), "model.Section")
	proto.RegisterType((*Meeting)(nil), "model.Meeting")
	proto.RegisterType((*Instructor)(nil), "model.Instructor")
	proto.RegisterType((*Book)(nil), "model.Book")
	proto.RegisterType((*Metadata)(nil), "model.Metadata")
	proto.RegisterType((*Registration)(nil), "model.Registration")
	proto.RegisterType((*ResolvedSemester)(nil), "model.ResolvedSemester")
	proto.RegisterType((*Semester)(nil), "model.Semester")
	proto.RegisterType((*UCTNotification)(nil), "model.UCTNotification")
	proto.RegisterType((*Response)(nil), "model.Response")
	proto.RegisterType((*Meta)(nil), "model.Meta")
	proto.RegisterType((*Data)(nil), "model.Data")
	proto.RegisterType((*Subscription)(nil), "model.Subscription")
	proto.RegisterType((*SubscriptionView)(nil), "model.SubscriptionView")
}

func init() { proto.RegisterFile("common/model/model.proto", fileDescriptor_3ad522f3927c3aa3) }

var fileDescriptor_3ad522f3927c3aa3 = []byte{
	// 1770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcb, 0x8f, 0x1b, 0x49,
	0x19, 0x4f, 0xbb, 0xfd, 0x68, 0x7f, 0xf6, 0x64, 0x66, 0x2a, 0xcb, 0x4e, 0xc3, 0xae, 0x3c, 0xb3,
	0xb5, 0x0f, 0x0c, 0xc9, 0x4c, 0x96, 0x6c, 0xd8, 0x61, 0x79, 0x48, 0xcb, 0x24, 0x42, 0x8c, 0x20,
	0x11, 0xaa, 0x64, 0x91, 0xe0, 0x80, 0xd5, 0xee, 0xae, 0x71, 0x8a, 0xb8, 0xbb, 0xac, 0xae, 0xf2,
	0x3c, 0x6e, 0xdc, 0x38, 0x73, 0xe3, 0xc0, 0x1f, 0xc0, 0x85, 0x03, 0x5c, 0xe0, 0xc0, 0x81, 0x0b,
	0xd2, 0x1e, 0x39, 0x72, 0x21, 0xca, 0x98, 0x1b, 0x27, 0x84, 0x38, 0x20, 0x71, 0x41, 0xf5, 0xe8,
	0x97, 0xed, 0xc4, 0x4e, 0xd0, 0xe6, 0x62, 0x55, 0xd5, 0xef, 0xf7, 0x7d, 0xf5, 0xf8, 0x7d, 0xf5,
	0x7d, 0xd5, 0x06, 0x3f, 0xe4, 0x71, 0xcc, 0x93, 0x9b, 0x31, 0x8f, 0xe8, 0xd8, 0xfc, 0x1e, 0x4c,
	0x52, 0x2e, 0x39, 0x6a, 0xe8, 0xce, 0x17, 0xf6, 0x47, 0x4c, 0x3e, 0x9a, 0x0e, 0x0f, 0x42, 0x1e,
	0xdf, 0x1c, 0xf1, 0x11, 0xbf, 0xa9, 0xd1, 0xe1, 0xf4, 0x44, 0xf7, 0x74, 0x47, 0xb7, 0x8c, 0x15,
	0xfe, 0x6f, 0x03, 0xe0, 0x93, 0x84, 0x9d, 0xd2, 0x54, 0x30, 0x79, 0x81, 0x76, 0xa1, 0xc6, 0x22,
	0xdf, 0xd9, 0x73, 0xfa, 0xee, 0xd1, 0xe6, 0xa7, 0x4f, 0x76, 0xaf, 0xfc, 0xeb, 0xc9, 0x6e, 0x2b,
	0x1a, 0x7e, 0x1d, 0xb3, 0x08, 0x93, 0x1a, 0x8b, 0xd0, 0xbb, 0x50, 0x4f, 0x82, 0x98, 0xfa, 0xb5,
	0x3d, 0xa7, 0xdf, 0x3e, 0xda, 0xb6, 0x94, 0xb6, 0xa2, 0xa8, 0x71, 0x4c, 0x34, 0xac, 0x68, 0xc1,
	0x70, 0x98, 0xfa, 0xee, 0x22, 0x4d, 0x8d, 0x63, 0xa2, 0x61, 0xf4, 0x01, 0xb4, 0x1f, 0xf1, 0x98,
	0x0e, 0x26, 0xc1, 0x88, 0xfa, 0x75, 0xcd, 0x7d, 0xdd, 0x72, 0xaf, 0x2a, 0x6e, 0x0e, 0x62, 0xe2,
	0xa9, 0xf6, 0x0f, 0x82, 0x11, 0x45, 0xdf, 0x83, 0xed, 0x94, 0x8e, 0x98, 0x90, 0x69, 0x20, 0x19,
	0x4f, 0x8c, 0x71, 0x43, 0x1b, 0xf7, 0xac, 0xf1, 0xeb, 0xca, 0x78, 0x81, 0x84, 0xc9, 0x56, 0x79,
	0x4c, 0x3b, 0xfb, 0x10, 0x20, 0x0e, 0x58, 0x32, 0x08, 0xf9, 0x98, 0xa7, 0x7e, 0x53, 0x7b, 0xd9,
	0xb1, 0x5e, 0x36, 0x95, 0x97, 0x02, 0xc5, 0xa4, 0xad, 0x3a, 0x77, 0x54, 0x1b, 0x7d, 0x13, 0xba,
	0x41, 0x18, 0xd2, 0x44, 0x5a, 0xcb, 0x96, 0xb6, 0xfc, 0xbc, 0xb5, 0xdc, 0xd6, 0x1b, 0x2d, 0xe1,
	0x98, 0x74, 0x4c, 0xd7, 0x58, 0x7f, 0x08, 0x20, 0xf9, 0x84, 0x85, 0x03, 0x7d, 0x96, 0xde, 0xe2,
	0xac, 0x05, 0x8a, 0x49, 0x5b, 0x77, 0xee, 0xab, 0x63, 0x7d, 0x1f, 0x3c, 0x83, 0xb0, 0xc8, 0x6f,
	0x6b, 0xab, 0xcf, 0x59, 0xab, 0x8d, 0xc2, 0x4a, 0x49, 0xd5, 0xd2, 0xcd, 0xe3, 0x08, 0x7d, 0x07,
	0x50, 0x4a, 0x05, 0x1f, 0x9f, 0xd2, 0x68, 0x20, 0x68, 0x4c, 0x85, 0xa4, 0xa9, 0xf0, 0x61, 0xcf,
	0xe9, 0x77, 0x6e, 0xed, 0x1c, 0x98, 0xf8, 0x21, 0x96, 0xf0, 0xc0, 0xe2, 0x64, 0x3b, 0x9d, 0x1b,
	0x11, 0xe8, 0xcb, 0xe0, 0x89, 0xe9, 0xf0, 0xa7, 0x34, 0x94, 0xc2, 0xef, 0xec, 0xb9, 0xfd, 0xce,
	0xad, 0xab, 0xd6, 0xfa, 0x81, 0x19, 0x26, 0x39, 0x8e, 0x3e, 0x86, 0x6b, 0xc1, 0x69, 0xc0, 0xc6,
	0xc1, 0x70, 0x4c, 0x4b, 0x93, 0x76, 0xb5, 0xd9, 0x66, 0x66, 0x96, 0x4d, 0x86, 0x72, 0x6e, 0x31,
	0xdb, 0x47, 0xb0, 0x51, 0x56, 0x4a, 0xf8, 0x1b, 0xda, 0xf6, 0x5a, 0xbe, 0xe0, 0x02, 0x23, 0x55,
	0x26, 0xba, 0x0e, 0x5e, 0x4c, 0x65, 0x10, 0x05, 0x32, 0xf0, 0xaf, 0x56, 0x66, 0xbc, 0x67, 0x87,
	0x49, 0x4e, 0xc0, 0x7f, 0x73, 0xa1, 0x65, 0xd7, 0x8f, 0xde, 0x29, 0x85, 0xfe, 0x6b, 0xea, 0x54,
	0xff, 0xf1, 0x64, 0xd7, 0xd9, 0x9f, 0x8f, 0xff, 0xbb, 0xb0, 0x31, 0xcd, 0xaf, 0x8b, 0x92, 0xa1,
	0xa6, 0x0d, 0x76, 0xcb, 0x06, 0x48, 0x19, 0x54, 0x58, 0x98, 0x74, 0x8b, 0xfe, 0x71, 0x71, 0x8b,
	0xdc, 0xe7, 0xdf, 0xa2, 0xeb, 0xd0, 0x4c, 0xa6, 0xf1, 0x90, 0xa6, 0xf6, 0x6e, 0x5c, 0xb3, 0xc4,
	0x8e, 0x26, 0x6a, 0x04, 0x13, 0x4b, 0x51, 0x64, 0x41, 0x03, 0xc1, 0x13, 0x7b, 0x17, 0x2a, 0x64,
	0x83, 0x60, 0x62, 0x29, 0x6a, 0x01, 0x17, 0x34, 0xc8, 0x02, 0xbe, 0xb2, 0x00, 0x35, 0x8e, 0x89,
	0x86, 0xe7, 0xe2, 0xb4, 0xf5, 0x52, 0x71, 0xea, 0xad, 0x15, 0xa7, 0x5f, 0x84, 0x56, 0xc8, 0xa7,
	0xa9, 0xa0, 0xc2, 0x6f, 0x6b, 0xd5, 0x36, 0xac, 0x6a, 0x77, 0xf4, 0x28, 0xc9, 0xd0, 0x8a, 0xbe,
	0xb0, 0x4a, 0xdf, 0xdf, 0xba, 0xd0, 0x34, 0x0e, 0xd6, 0x94, 0xf7, 0x1b, 0x00, 0x36, 0x8c, 0x0b,
	0x6d, 0xdf, 0x2c, 0xb3, 0xf5, 0xae, 0x0b, 0x0a, 0x26, 0x6d, 0xdb, 0xf9, 0x8c, 0x54, 0xdd, 0x07,
	0x4f, 0x5c, 0x24, 0x7c, 0x22, 0x98, 0xb0, 0xba, 0x6e, 0x67, 0xa7, 0x98, 0x8d, 0x63, 0x92, 0x53,
	0xe6, 0x04, 0x6b, 0xbe, 0x94, 0x60, 0xad, 0xb5, 0x04, 0x53, 0x09, 0x81, 0x86, 0xe6, 0x76, 0x7a,
	0xd5, 0x84, 0x60, 0x86, 0x49, 0x8e, 0x57, 0x34, 0x6b, 0xaf, 0xd2, 0xec, 0x17, 0x0d, 0x68, 0x59,
	0x17, 0x6b, 0x8a, 0xf6, 0x35, 0x68, 0x9b, 0xe8, 0x28, 0x34, 0x7b, 0xa3, 0x4c, 0xd6, 0xa5, 0x24,
	0x67, 0x60, 0xe2, 0x99, 0xf6, 0x71, 0x54, 0x92, 0xc2, 0x5d, 0x2d, 0xc5, 0x47, 0xd0, 0x09, 0x83,
	0xf1, 0x78, 0x50, 0x11, 0xcf, 0xb7, 0x16, 0x5b, 0x7a, 0x8e, 0x02, 0xc6, 0x04, 0x54, 0xef, 0xbe,
	0x31, 0xc5, 0xe0, 0xc6, 0xc1, 0xb9, 0x16, 0xd0, 0x3d, 0xda, 0xb2, 0x26, 0x9e, 0x29, 0x2f, 0xe7,
	0x98, 0x28, 0x50, 0x71, 0x12, 0x7e, 0xa6, 0x35, 0x9b, 0xe3, 0x24, 0xfc, 0x0c, 0x13, 0x05, 0xea,
	0x3b, 0x2e, 0x03, 0x39, 0x15, 0x56, 0xa4, 0xea, 0x1d, 0xd7, 0x88, 0xba, 0xe3, 0xba, 0x81, 0x0e,
	0xa0, 0x15, 0xa6, 0x34, 0x62, 0x52, 0xd8, 0x3b, 0xf8, 0x9a, 0x65, 0x77, 0xf5, 0x5a, 0x0d, 0x84,
	0x49, 0x46, 0x9a, 0x8b, 0x9d, 0xf6, 0x4b, 0xc5, 0x0e, 0xac, 0x1b, 0x3b, 0x31, 0xa5, 0x92, 0x25,
	0xa3, 0xf9, 0x62, 0x72, 0xcf, 0x0c, 0x93, 0x1c, 0x47, 0x1f, 0x40, 0x87, 0x25, 0x42, 0xa6, 0xd3,
	0x50, 0xf2, 0xbc, 0x88, 0x6c, 0x5b, 0xfa, 0x71, 0x8e, 0x90, 0x32, 0x0b, 0xbd, 0x05, 0x8d, 0x21,
	0xe7, 0x8f, 0xb3, 0xba, 0xd1, 0xb1, 0xf4, 0x23, 0xce, 0x1f, 0x13, 0x83, 0xbc, 0x58, 0x9d, 0xf8,
	0x95, 0x0b, 0x2d, 0xbb, 0xb4, 0x17, 0x48, 0x24, 0x26, 0x88, 0x9f, 0x9b, 0x48, 0x72, 0x8a, 0x4a,
	0x24, 0xa6, 0x73, 0x1c, 0xa1, 0xb7, 0xa0, 0x9e, 0x72, 0x1e, 0xdb, 0xa0, 0xdc, 0xc8, 0x92, 0x88,
	0x1a, 0xc3, 0x44, 0x43, 0xa8, 0x07, 0x6e, 0x14, 0x5c, 0xd8, 0x20, 0xec, 0x66, 0x91, 0x12, 0x05,
	0x17, 0x98, 0x28, 0x00, 0xdd, 0x02, 0x10, 0x32, 0x48, 0xe5, 0x40, 0xb2, 0x38, 0x7b, 0x1d, 0x5d,
	0xcb, 0xa7, 0xcd, 0x11, 0x35, 0xad, 0xea, 0x3c, 0x64, 0x31, 0x45, 0x37, 0xc0, 0xa3, 0x49, 0x64,
	0x2c, 0x9a, 0xd5, 0x5c, 0x93, 0x8d, 0x63, 0xd2, 0xa2, 0x49, 0xa4, 0xd9, 0xb7, 0x00, 0xc2, 0x71,
	0x20, 0xc4, 0x40, 0x5e, 0x4c, 0xb2, 0xda, 0x90, 0xcf, 0x50, 0x20, 0x98, 0xb4, 0x75, 0xe7, 0xe1,
	0xc5, 0x84, 0xa2, 0x3e, 0x34, 0x58, 0x12, 0xd1, 0x73, 0x1d, 0x90, 0x8d, 0x23, 0x64, 0xe3, 0x04,
	0xf4, 0xc9, 0x29, 0x00, 0x13, 0x43, 0x78, 0xb1, 0x94, 0xf1, 0x67, 0x07, 0xa0, 0x08, 0x85, 0x57,
	0xa1, 0xd0, 0x9a, 0xa9, 0x7e, 0x3f, 0xdb, 0x6f, 0x5d, 0xef, 0x77, 0xa7, 0xec, 0x7e, 0x71, 0xd3,
	0xf8, 0xf7, 0x0e, 0xd4, 0x55, 0x8c, 0xbe, 0x8a, 0x1d, 0xf4, 0xa1, 0x21, 0x99, 0x1c, 0x67, 0x5b,
	0xa8, 0x48, 0xa1, 0x01, 0x4c, 0x0c, 0x41, 0x25, 0xa6, 0x69, 0x3a, 0xb6, 0xa1, 0x56, 0x49, 0x4c,
	0xd3, 0x74, 0x8c, 0x89, 0x02, 0xf1, 0x6f, 0x5c, 0xf0, 0x32, 0x61, 0xd6, 0x5c, 0xfd, 0xc7, 0xcb,
	0x5f, 0x52, 0x6f, 0xac, 0xff, 0x8a, 0x3a, 0xac, 0x14, 0x6b, 0x57, 0x9b, 0xfb, 0xeb, 0x14, 0xea,
	0xdb, 0xe5, 0x82, 0x51, 0xd7, 0x76, 0x3b, 0xab, 0x8b, 0xc5, 0x61, 0xe5, 0xb8, 0x1b, 0xcb, 0xa6,
	0x5b, 0x7e, 0xd4, 0x87, 0x00, 0x36, 0x9d, 0x29, 0xc3, 0xe6, 0x12, 0xc3, 0x02, 0x56, 0x1f, 0x19,
	0xa6, 0x53, 0xd6, 0xa8, 0xb5, 0x4a, 0x23, 0x95, 0xeb, 0x79, 0x22, 0x69, 0x22, 0x97, 0xe6, 0x7a,
	0x03, 0xa9, 0x5c, 0x6f, 0x5b, 0x33, 0x07, 0xba, 0xe5, 0x57, 0xf4, 0x2b, 0x7d, 0xfd, 0x5e, 0x87,
	0xe6, 0x84, 0xa6, 0x8c, 0x47, 0xcb, 0xaa, 0xae, 0x41, 0x30, 0xb1, 0x14, 0x55, 0x75, 0x4d, 0x6b,
	0x10, 0x05, 0x92, 0x5a, 0xb5, 0x2a, 0x55, 0xb7, 0x04, 0x63, 0x02, 0xa6, 0x77, 0x57, 0x75, 0x7e,
	0xee, 0xc0, 0xd6, 0xfc, 0xb7, 0x0d, 0xfa, 0x12, 0xb4, 0xc2, 0x69, 0x9a, 0xaa, 0x93, 0x72, 0xf4,
	0x57, 0xd0, 0xc2, 0x07, 0x49, 0x86, 0xa3, 0xb7, 0xa1, 0x3e, 0x0e, 0x84, 0xd4, 0x9b, 0x5c, 0xc2,
	0xd3, 0xa0, 0x22, 0x25, 0xf4, 0x5c, 0xea, 0xad, 0x2c, 0x23, 0x29, 0x10, 0xff, 0x04, 0xbc, 0x7c,
	0x01, 0xd9, 0xd3, 0xdb, 0xd1, 0x29, 0xe1, 0x99, 0x4f, 0xef, 0xe2, 0x39, 0x5f, 0x5b, 0xf9, 0x9c,
	0xc7, 0x7f, 0x74, 0x60, 0xf3, 0x93, 0x3b, 0x0f, 0xef, 0x73, 0xc9, 0x4e, 0x58, 0x68, 0x14, 0xdd,
	0x87, 0xcd, 0xa4, 0xd4, 0x1f, 0xe4, 0xf2, 0xd6, 0x95, 0x27, 0x72, 0xb5, 0x0c, 0x1e, 0x47, 0xe8,
	0xed, 0x4a, 0xf5, 0x37, 0x73, 0x1a, 0x66, 0xa9, 0xd4, 0xbf, 0x99, 0xbf, 0x3f, 0xdc, 0x12, 0x21,
	0x7b, 0x70, 0x1c, 0x02, 0x14, 0x3a, 0x6b, 0xa5, 0x8a, 0x4a, 0x5d, 0xfc, 0xc7, 0x60, 0x8d, 0x4a,
	0x54, 0xfc, 0x7d, 0xf0, 0x08, 0x15, 0x13, 0x9e, 0x08, 0x8a, 0x76, 0xa1, 0xae, 0xf2, 0xba, 0x15,
	0xa7, 0x53, 0x4a, 0xfa, 0x44, 0x03, 0x8a, 0xa0, 0xab, 0x42, 0xad, 0x42, 0xb8, 0xab, 0x2a, 0x82,
	0x06, 0xf0, 0x6d, 0xa8, 0x2b, 0x3a, 0x42, 0x50, 0x0f, 0x79, 0x44, 0xcd, 0x41, 0x13, 0xdd, 0x46,
	0x3e, 0xb4, 0x62, 0x2a, 0x44, 0x30, 0xb2, 0x5b, 0x24, 0x59, 0x17, 0xff, 0xce, 0x85, 0xba, 0x72,
	0x82, 0xbe, 0x0a, 0x45, 0xb4, 0x32, 0x2a, 0x7c, 0xa7, 0xf2, 0xe2, 0x28, 0xf6, 0x41, 0x2a, 0xb4,
	0xca, 0x07, 0x72, 0x6d, 0xc5, 0x07, 0x72, 0xe9, 0x63, 0xc7, 0x7d, 0xee, 0xc7, 0x4e, 0xf9, 0x91,
	0x5d, 0x5f, 0xf1, 0xc8, 0xfe, 0x4a, 0xe5, 0xf4, 0x1b, 0xcf, 0x38, 0xfd, 0xf2, 0xb9, 0xa3, 0x3e,
	0xb4, 0xec, 0x9a, 0x74, 0x56, 0x5a, 0x5c, 0x72, 0x06, 0xa3, 0x77, 0xa1, 0x69, 0xd6, 0xa4, 0x53,
	0xd1, 0xc2, 0x82, 0x2d, 0xa8, 0x1d, 0x9a, 0xf5, 0xe8, 0x34, 0xb4, 0xb8, 0xdc, 0x0c, 0x46, 0x77,
	0x61, 0x5b, 0x4c, 0x87, 0x22, 0x4c, 0xd9, 0x44, 0x47, 0xe7, 0x29, 0xa3, 0x67, 0xb6, 0xd0, 0xef,
	0x14, 0x8b, 0xc8, 0xf1, 0x1f, 0x32, 0x7a, 0x46, 0xb6, 0xc4, 0xdc, 0x88, 0x12, 0xad, 0x5b, 0xa6,
	0xa1, 0x83, 0x3c, 0x8d, 0xcd, 0xfd, 0x19, 0xc4, 0x22, 0xbc, 0x77, 0xc2, 0x52, 0x2a, 0x24, 0x4f,
	0x69, 0x91, 0xd0, 0x0e, 0xa0, 0xc6, 0x85, 0x8d, 0xf6, 0x0a, 0x9f, 0x8b, 0x0a, 0x9f, 0x0b, 0x4c,
	0x6a, 0x5c, 0xa0, 0x1f, 0xc1, 0x06, 0x13, 0x03, 0xbb, 0x8e, 0x21, 0xcd, 0x32, 0xd8, 0x6d, 0x6b,
	0x7a, 0x43, 0x4f, 0x55, 0x26, 0x54, 0x67, 0xad, 0x20, 0xa4, 0xcb, 0xc4, 0x83, 0xbc, 0x8b, 0xee,
	0x55, 0x2e, 0xa0, 0xa9, 0xb6, 0x07, 0xd6, 0xef, 0x7b, 0x73, 0xcf, 0xef, 0xb2, 0xd3, 0x67, 0xbc,
	0xca, 0x8f, 0xa1, 0x7d, 0x12, 0xc6, 0x03, 0xc9, 0x1f, 0xd3, 0xec, 0x1f, 0x81, 0x1b, 0xd6, 0xdb,
	0x3b, 0xca, 0x5b, 0x0e, 0x56, 0x9c, 0x15, 0xa3, 0xc4, 0x3b, 0x09, 0xe3, 0x87, 0xaa, 0xa9, 0x56,
	0x16, 0xa6, 0x34, 0x90, 0x34, 0x1a, 0x04, 0xd2, 0xbe, 0x0c, 0x2b, 0x2b, 0x2b, 0xd0, 0x8a, 0xb3,
	0xd2, 0x30, 0x69, 0xdb, 0xce, 0xb7, 0x25, 0xfe, 0xb7, 0x03, 0x5b, 0xf3, 0xda, 0xce, 0xed, 0xde,
	0xf9, 0x7f, 0x77, 0x4f, 0xa0, 0x93, 0x9f, 0x74, 0x2a, 0x6c, 0x99, 0x7a, 0xdf, 0xfa, 0xeb, 0xdb,
	0xa7, 0x41, 0x06, 0x57, 0x1c, 0x96, 0xc7, 0x49, 0xd9, 0x09, 0xfa, 0x16, 0x34, 0x99, 0x18, 0x3c,
	0xe2, 0x26, 0xd7, 0x7b, 0x47, 0xef, 0x59, 0x77, 0x3d, 0x2b, 0xfa, 0x23, 0x2e, 0xe7, 0xd5, 0x56,
	0x43, 0xa4, 0xc1, 0xc4, 0x77, 0xb9, 0x3c, 0x3a, 0xfc, 0xeb, 0x65, 0xef, 0xca, 0xd3, 0xcb, 0x9e,
	0xf3, 0xcf, 0xcb, 0x9e, 0xf3, 0x9f, 0xcb, 0x9e, 0xf3, 0xb3, 0x59, 0xcf, 0xf9, 0xf5, 0xac, 0xe7,
	0xfc, 0x61, 0xd6, 0x73, 0xfe, 0x34, 0xeb, 0x39, 0x9f, 0xce, 0x7a, 0xce, 0x5f, 0x66, 0x3d, 0xe7,
	0xe9, 0xac, 0xe7, 0xfc, 0xf2, 0xef, 0xbd, 0x2b, 0x3f, 0x36, 0xff, 0xe8, 0xfe, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x33, 0x20, 0x98, 0x4c, 0xf3, 0x15, 0x00, 0x00,
}

func (this *University) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*University)
	if !ok {
		that2, ok := that.(University)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *University")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *University but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *University but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Abbr != that1.Abbr {
		return fmt.Errorf("Abbr this(%v) Not Equal that(%v)", this.Abbr, that1.Abbr)
	}
	if this.HomePage != that1.HomePage {
		return fmt.Errorf("HomePage this(%v) Not Equal that(%v)", this.HomePage, that1.HomePage)
	}
	if this.RegistrationPage != that1.RegistrationPage {
		return fmt.Errorf("RegistrationPage this(%v) Not Equal that(%v)", this.RegistrationPage, that1.RegistrationPage)
	}
	if this.MainColor != that1.MainColor {
		return fmt.Errorf("MainColor this(%v) Not Equal that(%v)", this.MainColor, that1.MainColor)
	}
	if this.AccentColor != that1.AccentColor {
		return fmt.Errorf("AccentColor this(%v) Not Equal that(%v)", this.AccentColor, that1.AccentColor)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if !this.ResolvedSemesters.Equal(that1.ResolvedSemesters) {
		return fmt.Errorf("ResolvedSemesters this(%v) Not Equal that(%v)", this.ResolvedSemesters, that1.ResolvedSemesters)
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return fmt.Errorf("Subjects this(%v) Not Equal that(%v)", len(this.Subjects), len(that1.Subjects))
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return fmt.Errorf("Subjects this[%v](%v) Not Equal that[%v](%v)", i, this.Subjects[i], i, that1.Subjects[i])
		}
	}
	if len(this.AvailableSemesters) != len(that1.AvailableSemesters) {
		return fmt.Errorf("AvailableSemesters this(%v) Not Equal that(%v)", len(this.AvailableSemesters), len(that1.AvailableSemesters))
	}
	for i := range this.AvailableSemesters {
		if !this.AvailableSemesters[i].Equal(that1.AvailableSemesters[i]) {
			return fmt.Errorf("AvailableSemesters this[%v](%v) Not Equal that[%v](%v)", i, this.AvailableSemesters[i], i, that1.AvailableSemesters[i])
		}
	}
	if len(this.Registrations) != len(that1.Registrations) {
		return fmt.Errorf("Registrations this(%v) Not Equal that(%v)", len(this.Registrations), len(that1.Registrations))
	}
	for i := range this.Registrations {
		if !this.Registrations[i].Equal(that1.Registrations[i]) {
			return fmt.Errorf("Registrations this[%v](%v) Not Equal that[%v](%v)", i, this.Registrations[i], i, that1.Registrations[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *University) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*University)
	if !ok {
		that2, ok := that.(University)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Abbr != that1.Abbr {
		return false
	}
	if this.HomePage != that1.HomePage {
		return false
	}
	if this.RegistrationPage != that1.RegistrationPage {
		return false
	}
	if this.MainColor != that1.MainColor {
		return false
	}
	if this.AccentColor != that1.AccentColor {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.ResolvedSemesters.Equal(that1.ResolvedSemesters) {
		return false
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if len(this.AvailableSemesters) != len(that1.AvailableSemesters) {
		return false
	}
	for i := range this.AvailableSemesters {
		if !this.AvailableSemesters[i].Equal(that1.AvailableSemesters[i]) {
			return false
		}
	}
	if len(this.Registrations) != len(that1.Registrations) {
		return false
	}
	for i := range this.Registrations {
		if !this.Registrations[i].Equal(that1.Registrations[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subject) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subject)
	if !ok {
		that2, ok := that.(Subject)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subject")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subject but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subject but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != that1.UniversityId {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Season != that1.Season {
		return fmt.Errorf("Season this(%v) Not Equal that(%v)", this.Season, that1.Season)
	}
	if this.Year != that1.Year {
		return fmt.Errorf("Year this(%v) Not Equal that(%v)", this.Year, that1.Year)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Courses) != len(that1.Courses) {
		return fmt.Errorf("Courses this(%v) Not Equal that(%v)", len(this.Courses), len(that1.Courses))
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return fmt.Errorf("Courses this[%v](%v) Not Equal that[%v](%v)", i, this.Courses[i], i, that1.Courses[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Subject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subject)
	if !ok {
		that2, ok := that.(Subject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != that1.UniversityId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Course) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Course")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Course but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Course but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SubjectId != that1.SubjectId {
		return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", this.SubjectId, that1.SubjectId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Synopsis != nil && that1.Synopsis != nil {
		if *this.Synopsis != *that1.Synopsis {
			return fmt.Errorf("Synopsis this(%v) Not Equal that(%v)", *this.Synopsis, *that1.Synopsis)
		}
	} else if this.Synopsis != nil {
		return fmt.Errorf("this.Synopsis == nil && that.Synopsis != nil")
	} else if that1.Synopsis != nil {
		return fmt.Errorf("Synopsis this(%v) Not Equal that(%v)", this.Synopsis, that1.Synopsis)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Sections) != len(that1.Sections) {
		return fmt.Errorf("Sections this(%v) Not Equal that(%v)", len(this.Sections), len(that1.Sections))
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return fmt.Errorf("Sections this[%v](%v) Not Equal that[%v](%v)", i, this.Sections[i], i, that1.Sections[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Course) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SubjectId != that1.SubjectId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Synopsis != nil && that1.Synopsis != nil {
		if *this.Synopsis != *that1.Synopsis {
			return false
		}
	} else if this.Synopsis != nil {
		return false
	} else if that1.Synopsis != nil {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Section) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Section)
	if !ok {
		that2, ok := that.(Section)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Section")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Section but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Section but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.CourseId != that1.CourseId {
		return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", this.CourseId, that1.CourseId)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.CallNumber != that1.CallNumber {
		return fmt.Errorf("CallNumber this(%v) Not Equal that(%v)", this.CallNumber, that1.CallNumber)
	}
	if this.Max != that1.Max {
		return fmt.Errorf("Max this(%v) Not Equal that(%v)", this.Max, that1.Max)
	}
	if this.Now != that1.Now {
		return fmt.Errorf("Now this(%v) Not Equal that(%v)", this.Now, that1.Now)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Credits != that1.Credits {
		return fmt.Errorf("Credits this(%v) Not Equal that(%v)", this.Credits, that1.Credits)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.TopicId != that1.TopicId {
		return fmt.Errorf("TopicId this(%v) Not Equal that(%v)", this.TopicId, that1.TopicId)
	}
	if len(this.Meetings) != len(that1.Meetings) {
		return fmt.Errorf("Meetings this(%v) Not Equal that(%v)", len(this.Meetings), len(that1.Meetings))
	}
	for i := range this.Meetings {
		if !this.Meetings[i].Equal(that1.Meetings[i]) {
			return fmt.Errorf("Meetings this[%v](%v) Not Equal that[%v](%v)", i, this.Meetings[i], i, that1.Meetings[i])
		}
	}
	if len(this.Instructors) != len(that1.Instructors) {
		return fmt.Errorf("Instructors this(%v) Not Equal that(%v)", len(this.Instructors), len(that1.Instructors))
	}
	for i := range this.Instructors {
		if !this.Instructors[i].Equal(that1.Instructors[i]) {
			return fmt.Errorf("Instructors this[%v](%v) Not Equal that[%v](%v)", i, this.Instructors[i], i, that1.Instructors[i])
		}
	}
	if len(this.Books) != len(that1.Books) {
		return fmt.Errorf("Books this(%v) Not Equal that(%v)", len(this.Books), len(that1.Books))
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return fmt.Errorf("Books this[%v](%v) Not Equal that[%v](%v)", i, this.Books[i], i, that1.Books[i])
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Section) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Section)
	if !ok {
		that2, ok := that.(Section)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.CallNumber != that1.CallNumber {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Credits != that1.Credits {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.Meetings) != len(that1.Meetings) {
		return false
	}
	for i := range this.Meetings {
		if !this.Meetings[i].Equal(that1.Meetings[i]) {
			return false
		}
	}
	if len(this.Instructors) != len(that1.Instructors) {
		return false
	}
	for i := range this.Instructors {
		if !this.Instructors[i].Equal(that1.Instructors[i]) {
			return false
		}
	}
	if len(this.Books) != len(that1.Books) {
		return false
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return false
		}
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Meeting) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Meeting)
	if !ok {
		that2, ok := that.(Meeting)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Meeting")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Meeting but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Meeting but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Room != nil && that1.Room != nil {
		if *this.Room != *that1.Room {
			return fmt.Errorf("Room this(%v) Not Equal that(%v)", *this.Room, *that1.Room)
		}
	} else if this.Room != nil {
		return fmt.Errorf("this.Room == nil && that.Room != nil")
	} else if that1.Room != nil {
		return fmt.Errorf("Room this(%v) Not Equal that(%v)", this.Room, that1.Room)
	}
	if this.Day != nil && that1.Day != nil {
		if *this.Day != *that1.Day {
			return fmt.Errorf("Day this(%v) Not Equal that(%v)", *this.Day, *that1.Day)
		}
	} else if this.Day != nil {
		return fmt.Errorf("this.Day == nil && that.Day != nil")
	} else if that1.Day != nil {
		return fmt.Errorf("Day this(%v) Not Equal that(%v)", this.Day, that1.Day)
	}
	if this.StartTime != nil && that1.StartTime != nil {
		if *this.StartTime != *that1.StartTime {
			return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", *this.StartTime, *that1.StartTime)
		}
	} else if this.StartTime != nil {
		return fmt.Errorf("this.StartTime == nil && that.StartTime != nil")
	} else if that1.StartTime != nil {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if this.EndTime != nil && that1.EndTime != nil {
		if *this.EndTime != *that1.EndTime {
			return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", *this.EndTime, *that1.EndTime)
		}
	} else if this.EndTime != nil {
		return fmt.Errorf("this.EndTime == nil && that.EndTime != nil")
	} else if that1.EndTime != nil {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if this.ClassType != nil && that1.ClassType != nil {
		if *this.ClassType != *that1.ClassType {
			return fmt.Errorf("ClassType this(%v) Not Equal that(%v)", *this.ClassType, *that1.ClassType)
		}
	} else if this.ClassType != nil {
		return fmt.Errorf("this.ClassType == nil && that.ClassType != nil")
	} else if that1.ClassType != nil {
		return fmt.Errorf("ClassType this(%v) Not Equal that(%v)", this.ClassType, that1.ClassType)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return fmt.Errorf("Metadata this(%v) Not Equal that(%v)", len(this.Metadata), len(that1.Metadata))
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return fmt.Errorf("Metadata this[%v](%v) Not Equal that[%v](%v)", i, this.Metadata[i], i, that1.Metadata[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Meeting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Meeting)
	if !ok {
		that2, ok := that.(Meeting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Room != nil && that1.Room != nil {
		if *this.Room != *that1.Room {
			return false
		}
	} else if this.Room != nil {
		return false
	} else if that1.Room != nil {
		return false
	}
	if this.Day != nil && that1.Day != nil {
		if *this.Day != *that1.Day {
			return false
		}
	} else if this.Day != nil {
		return false
	} else if that1.Day != nil {
		return false
	}
	if this.StartTime != nil && that1.StartTime != nil {
		if *this.StartTime != *that1.StartTime {
			return false
		}
	} else if this.StartTime != nil {
		return false
	} else if that1.StartTime != nil {
		return false
	}
	if this.EndTime != nil && that1.EndTime != nil {
		if *this.EndTime != *that1.EndTime {
			return false
		}
	} else if this.EndTime != nil {
		return false
	} else if that1.EndTime != nil {
		return false
	}
	if this.ClassType != nil && that1.ClassType != nil {
		if *this.ClassType != *that1.ClassType {
			return false
		}
	} else if this.ClassType != nil {
		return false
	} else if that1.ClassType != nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Instructor) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Instructor)
	if !ok {
		that2, ok := that.(Instructor)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Instructor")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Instructor but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Instructor but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Instructor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Instructor)
	if !ok {
		that2, ok := that.(Instructor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Book) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Book")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Book but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Book but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SectionId != that1.SectionId {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Url != that1.Url {
		return fmt.Errorf("Url this(%v) Not Equal that(%v)", this.Url, that1.Url)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Book) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SectionId != that1.SectionId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Metadata) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Metadata")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Metadata but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Metadata but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != nil && that1.UniversityId != nil {
		if *this.UniversityId != *that1.UniversityId {
			return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", *this.UniversityId, *that1.UniversityId)
		}
	} else if this.UniversityId != nil {
		return fmt.Errorf("this.UniversityId == nil && that.UniversityId != nil")
	} else if that1.UniversityId != nil {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.SubjectId != nil && that1.SubjectId != nil {
		if *this.SubjectId != *that1.SubjectId {
			return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", *this.SubjectId, *that1.SubjectId)
		}
	} else if this.SubjectId != nil {
		return fmt.Errorf("this.SubjectId == nil && that.SubjectId != nil")
	} else if that1.SubjectId != nil {
		return fmt.Errorf("SubjectId this(%v) Not Equal that(%v)", this.SubjectId, that1.SubjectId)
	}
	if this.CourseId != nil && that1.CourseId != nil {
		if *this.CourseId != *that1.CourseId {
			return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", *this.CourseId, *that1.CourseId)
		}
	} else if this.CourseId != nil {
		return fmt.Errorf("this.CourseId == nil && that.CourseId != nil")
	} else if that1.CourseId != nil {
		return fmt.Errorf("CourseId this(%v) Not Equal that(%v)", this.CourseId, that1.CourseId)
	}
	if this.SectionId != nil && that1.SectionId != nil {
		if *this.SectionId != *that1.SectionId {
			return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", *this.SectionId, *that1.SectionId)
		}
	} else if this.SectionId != nil {
		return fmt.Errorf("this.SectionId == nil && that.SectionId != nil")
	} else if that1.SectionId != nil {
		return fmt.Errorf("SectionId this(%v) Not Equal that(%v)", this.SectionId, that1.SectionId)
	}
	if this.MeetingId != nil && that1.MeetingId != nil {
		if *this.MeetingId != *that1.MeetingId {
			return fmt.Errorf("MeetingId this(%v) Not Equal that(%v)", *this.MeetingId, *that1.MeetingId)
		}
	} else if this.MeetingId != nil {
		return fmt.Errorf("this.MeetingId == nil && that.MeetingId != nil")
	} else if that1.MeetingId != nil {
		return fmt.Errorf("MeetingId this(%v) Not Equal that(%v)", this.MeetingId, that1.MeetingId)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != nil && that1.UniversityId != nil {
		if *this.UniversityId != *that1.UniversityId {
			return false
		}
	} else if this.UniversityId != nil {
		return false
	} else if that1.UniversityId != nil {
		return false
	}
	if this.SubjectId != nil && that1.SubjectId != nil {
		if *this.SubjectId != *that1.SubjectId {
			return false
		}
	} else if this.SubjectId != nil {
		return false
	} else if that1.SubjectId != nil {
		return false
	}
	if this.CourseId != nil && that1.CourseId != nil {
		if *this.CourseId != *that1.CourseId {
			return false
		}
	} else if this.CourseId != nil {
		return false
	} else if that1.CourseId != nil {
		return false
	}
	if this.SectionId != nil && that1.SectionId != nil {
		if *this.SectionId != *that1.SectionId {
			return false
		}
	} else if this.SectionId != nil {
		return false
	} else if that1.SectionId != nil {
		return false
	}
	if this.MeetingId != nil && that1.MeetingId != nil {
		if *this.MeetingId != *that1.MeetingId {
			return false
		}
	} else if this.MeetingId != nil {
		return false
	} else if that1.MeetingId != nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Registration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Registration)
	if !ok {
		that2, ok := that.(Registration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Registration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Registration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Registration but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.UniversityId != that1.UniversityId {
		return fmt.Errorf("UniversityId this(%v) Not Equal that(%v)", this.UniversityId, that1.UniversityId)
	}
	if this.Period != that1.Period {
		return fmt.Errorf("Period this(%v) Not Equal that(%v)", this.Period, that1.Period)
	}
	if this.PeriodDate != that1.PeriodDate {
		return fmt.Errorf("PeriodDate this(%v) Not Equal that(%v)", this.PeriodDate, that1.PeriodDate)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Registration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Registration)
	if !ok {
		that2, ok := that.(Registration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UniversityId != that1.UniversityId {
		return false
	}
	if this.Period != that1.Period {
		return false
	}
	if this.PeriodDate != that1.PeriodDate {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResolvedSemester) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResolvedSemester)
	if !ok {
		that2, ok := that.(ResolvedSemester)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ResolvedSemester")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ResolvedSemester but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ResolvedSemester but is not nil && this == nil")
	}
	if !this.Current.Equal(that1.Current) {
		return fmt.Errorf("Current this(%v) Not Equal that(%v)", this.Current, that1.Current)
	}
	if !this.Last.Equal(that1.Last) {
		return fmt.Errorf("Last this(%v) Not Equal that(%v)", this.Last, that1.Last)
	}
	if !this.Next.Equal(that1.Next) {
		return fmt.Errorf("Next this(%v) Not Equal that(%v)", this.Next, that1.Next)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ResolvedSemester) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolvedSemester)
	if !ok {
		that2, ok := that.(ResolvedSemester)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Current.Equal(that1.Current) {
		return false
	}
	if !this.Last.Equal(that1.Last) {
		return false
	}
	if !this.Next.Equal(that1.Next) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Semester) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Semester)
	if !ok {
		that2, ok := that.(Semester)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Semester")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Semester but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Semester but is not nil && this == nil")
	}
	if this.Year != that1.Year {
		return fmt.Errorf("Year this(%v) Not Equal that(%v)", this.Year, that1.Year)
	}
	if this.Season != that1.Season {
		return fmt.Errorf("Season this(%v) Not Equal that(%v)", this.Season, that1.Season)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Semester) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Semester)
	if !ok {
		that2, ok := that.(Semester)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UCTNotification) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UCTNotification)
	if !ok {
		that2, ok := that.(UCTNotification)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UCTNotification")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UCTNotification but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UCTNotification but is not nil && this == nil")
	}
	if this.NotificationId != that1.NotificationId {
		return fmt.Errorf("NotificationId this(%v) Not Equal that(%v)", this.NotificationId, that1.NotificationId)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.University.Equal(&that1.University) {
		return fmt.Errorf("University this(%v) Not Equal that(%v)", this.University, that1.University)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UCTNotification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UCTNotification)
	if !ok {
		that2, ok := that.(UCTNotification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotificationId != that1.NotificationId {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.University.Equal(&that1.University) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Response but is not nil && this == nil")
	}
	if !this.Meta.Equal(that1.Meta) {
		return fmt.Errorf("Meta this(%v) Not Equal that(%v)", this.Meta, that1.Meta)
	}
	if !this.Data.Equal(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Meta) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Meta)
	if !ok {
		that2, ok := that.(Meta)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Meta")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Meta but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Meta but is not nil && this == nil")
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return fmt.Errorf("Code this(%v) Not Equal that(%v)", *this.Code, *that1.Code)
		}
	} else if this.Code != nil {
		return fmt.Errorf("this.Code == nil && that.Code != nil")
	} else if that1.Code != nil {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return fmt.Errorf("Message this(%v) Not Equal that(%v)", *this.Message, *that1.Message)
		}
	} else if this.Message != nil {
		return fmt.Errorf("this.Message == nil && that.Message != nil")
	} else if that1.Message != nil {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Meta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Meta)
	if !ok {
		that2, ok := that.(Meta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	if this.Message != nil && that1.Message != nil {
		if *this.Message != *that1.Message {
			return false
		}
	} else if this.Message != nil {
		return false
	} else if that1.Message != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Data) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Data")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Data but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Data but is not nil && this == nil")
	}
	if len(this.Universities) != len(that1.Universities) {
		return fmt.Errorf("Universities this(%v) Not Equal that(%v)", len(this.Universities), len(that1.Universities))
	}
	for i := range this.Universities {
		if !this.Universities[i].Equal(that1.Universities[i]) {
			return fmt.Errorf("Universities this[%v](%v) Not Equal that[%v](%v)", i, this.Universities[i], i, that1.Universities[i])
		}
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return fmt.Errorf("Subjects this(%v) Not Equal that(%v)", len(this.Subjects), len(that1.Subjects))
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return fmt.Errorf("Subjects this[%v](%v) Not Equal that[%v](%v)", i, this.Subjects[i], i, that1.Subjects[i])
		}
	}
	if len(this.Courses) != len(that1.Courses) {
		return fmt.Errorf("Courses this(%v) Not Equal that(%v)", len(this.Courses), len(that1.Courses))
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return fmt.Errorf("Courses this[%v](%v) Not Equal that[%v](%v)", i, this.Courses[i], i, that1.Courses[i])
		}
	}
	if len(this.Sections) != len(that1.Sections) {
		return fmt.Errorf("Sections this(%v) Not Equal that(%v)", len(this.Sections), len(that1.Sections))
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return fmt.Errorf("Sections this[%v](%v) Not Equal that[%v](%v)", i, this.Sections[i], i, that1.Sections[i])
		}
	}
	if !this.University.Equal(that1.University) {
		return fmt.Errorf("University this(%v) Not Equal that(%v)", this.University, that1.University)
	}
	if !this.Subject.Equal(that1.Subject) {
		return fmt.Errorf("Subject this(%v) Not Equal that(%v)", this.Subject, that1.Subject)
	}
	if !this.Course.Equal(that1.Course) {
		return fmt.Errorf("Course this(%v) Not Equal that(%v)", this.Course, that1.Course)
	}
	if !this.Section.Equal(that1.Section) {
		return fmt.Errorf("Section this(%v) Not Equal that(%v)", this.Section, that1.Section)
	}
	if len(this.SubscriptionView) != len(that1.SubscriptionView) {
		return fmt.Errorf("SubscriptionView this(%v) Not Equal that(%v)", len(this.SubscriptionView), len(that1.SubscriptionView))
	}
	for i := range this.SubscriptionView {
		if !this.SubscriptionView[i].Equal(that1.SubscriptionView[i]) {
			return fmt.Errorf("SubscriptionView this[%v](%v) Not Equal that[%v](%v)", i, this.SubscriptionView[i], i, that1.SubscriptionView[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Universities) != len(that1.Universities) {
		return false
	}
	for i := range this.Universities {
		if !this.Universities[i].Equal(that1.Universities[i]) {
			return false
		}
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if !this.Subjects[i].Equal(that1.Subjects[i]) {
			return false
		}
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if !this.University.Equal(that1.University) {
		return false
	}
	if !this.Subject.Equal(that1.Subject) {
		return false
	}
	if !this.Course.Equal(that1.Course) {
		return false
	}
	if !this.Section.Equal(that1.Section) {
		return false
	}
	if len(this.SubscriptionView) != len(that1.SubscriptionView) {
		return false
	}
	for i := range this.SubscriptionView {
		if !this.SubscriptionView[i].Equal(that1.SubscriptionView[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Subscription) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subscription)
	if !ok {
		that2, ok := that.(Subscription)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subscription")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subscription but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subscription but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Os != that1.Os {
		return fmt.Errorf("Os this(%v) Not Equal that(%v)", this.Os, that1.Os)
	}
	if this.IsSubscribed != that1.IsSubscribed {
		return fmt.Errorf("IsSubscribed this(%v) Not Equal that(%v)", this.IsSubscribed, that1.IsSubscribed)
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.FcmToken != that1.FcmToken {
		return fmt.Errorf("FcmToken this(%v) Not Equal that(%v)", this.FcmToken, that1.FcmToken)
	}
	if this.CreatedAt != that1.CreatedAt {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Subscription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subscription)
	if !ok {
		that2, ok := that.(Subscription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.IsSubscribed != that1.IsSubscribed {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.FcmToken != that1.FcmToken {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SubscriptionView) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SubscriptionView)
	if !ok {
		that2, ok := that.(SubscriptionView)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SubscriptionView")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SubscriptionView but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SubscriptionView but is not nil && this == nil")
	}
	if this.TopicName != that1.TopicName {
		return fmt.Errorf("TopicName this(%v) Not Equal that(%v)", this.TopicName, that1.TopicName)
	}
	if this.Subscribers != that1.Subscribers {
		return fmt.Errorf("Subscribers this(%v) Not Equal that(%v)", this.Subscribers, that1.Subscribers)
	}
	if this.IsHot != that1.IsHot {
		return fmt.Errorf("IsHot this(%v) Not Equal that(%v)", this.IsHot, that1.IsHot)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SubscriptionView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscriptionView)
	if !ok {
		that2, ok := that.(SubscriptionView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.Subscribers != that1.Subscribers {
		return false
	}
	if this.IsHot != that1.IsHot {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *University) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&model.University{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Abbr: "+fmt.Sprintf("%#v", this.Abbr)+",\n")
	s = append(s, "HomePage: "+fmt.Sprintf("%#v", this.HomePage)+",\n")
	s = append(s, "RegistrationPage: "+fmt.Sprintf("%#v", this.RegistrationPage)+",\n")
	s = append(s, "MainColor: "+fmt.Sprintf("%#v", this.MainColor)+",\n")
	s = append(s, "AccentColor: "+fmt.Sprintf("%#v", this.AccentColor)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.ResolvedSemesters != nil {
		s = append(s, "ResolvedSemesters: "+fmt.Sprintf("%#v", this.ResolvedSemesters)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	if this.AvailableSemesters != nil {
		s = append(s, "AvailableSemesters: "+fmt.Sprintf("%#v", this.AvailableSemesters)+",\n")
	}
	if this.Registrations != nil {
		s = append(s, "Registrations: "+fmt.Sprintf("%#v", this.Registrations)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&model.Subject{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UniversityId: "+fmt.Sprintf("%#v", this.UniversityId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Season: "+fmt.Sprintf("%#v", this.Season)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Course) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&model.Course{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SubjectId: "+fmt.Sprintf("%#v", this.SubjectId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	if this.Synopsis != nil {
		s = append(s, "Synopsis: "+valueToGoStringModel(this.Synopsis, "string")+",\n")
	}
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Section) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&model.Section{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "CallNumber: "+fmt.Sprintf("%#v", this.CallNumber)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Credits: "+fmt.Sprintf("%#v", this.Credits)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Meetings != nil {
		s = append(s, "Meetings: "+fmt.Sprintf("%#v", this.Meetings)+",\n")
	}
	if this.Instructors != nil {
		s = append(s, "Instructors: "+fmt.Sprintf("%#v", this.Instructors)+",\n")
	}
	if this.Books != nil {
		s = append(s, "Books: "+fmt.Sprintf("%#v", this.Books)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Meeting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&model.Meeting{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	if this.Room != nil {
		s = append(s, "Room: "+valueToGoStringModel(this.Room, "string")+",\n")
	}
	if this.Day != nil {
		s = append(s, "Day: "+valueToGoStringModel(this.Day, "string")+",\n")
	}
	if this.StartTime != nil {
		s = append(s, "StartTime: "+valueToGoStringModel(this.StartTime, "string")+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+valueToGoStringModel(this.EndTime, "string")+",\n")
	}
	if this.ClassType != nil {
		s = append(s, "ClassType: "+valueToGoStringModel(this.ClassType, "string")+",\n")
	}
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Instructor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Instructor{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Book) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Book{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SectionId: "+fmt.Sprintf("%#v", this.SectionId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&model.Metadata{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.UniversityId != nil {
		s = append(s, "UniversityId: "+valueToGoStringModel(this.UniversityId, "int64")+",\n")
	}
	if this.SubjectId != nil {
		s = append(s, "SubjectId: "+valueToGoStringModel(this.SubjectId, "int64")+",\n")
	}
	if this.CourseId != nil {
		s = append(s, "CourseId: "+valueToGoStringModel(this.CourseId, "int64")+",\n")
	}
	if this.SectionId != nil {
		s = append(s, "SectionId: "+valueToGoStringModel(this.SectionId, "int64")+",\n")
	}
	if this.MeetingId != nil {
		s = append(s, "MeetingId: "+valueToGoStringModel(this.MeetingId, "int64")+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Registration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.Registration{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UniversityId: "+fmt.Sprintf("%#v", this.UniversityId)+",\n")
	s = append(s, "Period: "+fmt.Sprintf("%#v", this.Period)+",\n")
	s = append(s, "PeriodDate: "+fmt.Sprintf("%#v", this.PeriodDate)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolvedSemester) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&model.ResolvedSemester{")
	if this.Current != nil {
		s = append(s, "Current: "+fmt.Sprintf("%#v", this.Current)+",\n")
	}
	if this.Last != nil {
		s = append(s, "Last: "+fmt.Sprintf("%#v", this.Last)+",\n")
	}
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Semester) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Semester{")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Season: "+fmt.Sprintf("%#v", this.Season)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UCTNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&model.UCTNotification{")
	s = append(s, "NotificationId: "+fmt.Sprintf("%#v", this.NotificationId)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "University: "+strings.Replace(this.University.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Response{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Meta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&model.Meta{")
	if this.Code != nil {
		s = append(s, "Code: "+valueToGoStringModel(this.Code, "int32")+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+valueToGoStringModel(this.Message, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&model.Data{")
	if this.Universities != nil {
		s = append(s, "Universities: "+fmt.Sprintf("%#v", this.Universities)+",\n")
	}
	if this.Subjects != nil {
		s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	}
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	if this.University != nil {
		s = append(s, "University: "+fmt.Sprintf("%#v", this.University)+",\n")
	}
	if this.Subject != nil {
		s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	}
	if this.Course != nil {
		s = append(s, "Course: "+fmt.Sprintf("%#v", this.Course)+",\n")
	}
	if this.Section != nil {
		s = append(s, "Section: "+fmt.Sprintf("%#v", this.Section)+",\n")
	}
	if this.SubscriptionView != nil {
		s = append(s, "SubscriptionView: "+fmt.Sprintf("%#v", this.SubscriptionView)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Subscription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&model.Subscription{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "IsSubscribed: "+fmt.Sprintf("%#v", this.IsSubscribed)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "FcmToken: "+fmt.Sprintf("%#v", this.FcmToken)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscriptionView) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&model.SubscriptionView{")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "Subscribers: "+fmt.Sprintf("%#v", this.Subscribers)+",\n")
	s = append(s, "IsHot: "+fmt.Sprintf("%#v", this.IsHot)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModel(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *University) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *University) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *University) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Registrations) > 0 {
		for iNdEx := len(m.Registrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.AvailableSemesters) > 0 {
		for iNdEx := len(m.AvailableSemesters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvailableSemesters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ResolvedSemesters != nil {
		{
			size, err := m.ResolvedSemesters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	i -= len(m.TopicId)
	copy(dAtA[i:], m.TopicId)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicId)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x42
	i -= len(m.AccentColor)
	copy(dAtA[i:], m.AccentColor)
	i = encodeVarintModel(dAtA, i, uint64(len(m.AccentColor)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.MainColor)
	copy(dAtA[i:], m.MainColor)
	i = encodeVarintModel(dAtA, i, uint64(len(m.MainColor)))
	i--
	dAtA[i] = 0x32
	i -= len(m.RegistrationPage)
	copy(dAtA[i:], m.RegistrationPage)
	i = encodeVarintModel(dAtA, i, uint64(len(m.RegistrationPage)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.HomePage)
	copy(dAtA[i:], m.HomePage)
	i = encodeVarintModel(dAtA, i, uint64(len(m.HomePage)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Abbr)
	copy(dAtA[i:], m.Abbr)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Abbr)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Courses) > 0 {
		for iNdEx := len(m.Courses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Courses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	i -= len(m.TopicId)
	copy(dAtA[i:], m.TopicId)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicId)))
	i--
	dAtA[i] = 0x42
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Year)
	copy(dAtA[i:], m.Year)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Year)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Season)
	copy(dAtA[i:], m.Season)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Season)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Number)
	copy(dAtA[i:], m.Number)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Number)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.UniversityId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Course) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Course) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Course) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i -= len(m.TopicId)
	copy(dAtA[i:], m.TopicId)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicId)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x32
	if m.Synopsis != nil {
		i -= len(*m.Synopsis)
		copy(dAtA[i:], *m.Synopsis)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.Synopsis)))
		i--
		dAtA[i] = 0x2a
	}
	i -= len(m.Number)
	copy(dAtA[i:], m.Number)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Number)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.SubjectId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Instructors) > 0 {
		for iNdEx := len(m.Instructors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instructors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Meetings) > 0 {
		for iNdEx := len(m.Meetings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meetings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	i -= len(m.TopicId)
	copy(dAtA[i:], m.TopicId)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicId)))
	i--
	dAtA[i] = 0x52
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Credits)
	copy(dAtA[i:], m.Credits)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Credits)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x3a
	i = encodeVarintModel(dAtA, i, uint64(m.Now))
	i--
	dAtA[i] = 0x30
	i = encodeVarintModel(dAtA, i, uint64(m.Max))
	i--
	dAtA[i] = 0x28
	i -= len(m.CallNumber)
	copy(dAtA[i:], m.CallNumber)
	i = encodeVarintModel(dAtA, i, uint64(len(m.CallNumber)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Number)
	copy(dAtA[i:], m.Number)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Number)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.CourseId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Meeting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meeting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meeting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	i = encodeVarintModel(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x40
	if m.ClassType != nil {
		i -= len(*m.ClassType)
		copy(dAtA[i:], *m.ClassType)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.ClassType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EndTime != nil {
		i -= len(*m.EndTime)
		copy(dAtA[i:], *m.EndTime)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.StartTime != nil {
		i -= len(*m.StartTime)
		copy(dAtA[i:], *m.StartTime)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Day != nil {
		i -= len(*m.Day)
		copy(dAtA[i:], *m.Day)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.Day)))
		i--
		dAtA[i] = 0x22
	}
	if m.Room != nil {
		i -= len(*m.Room)
		copy(dAtA[i:], *m.Room)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.Room)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintModel(dAtA, i, uint64(m.SectionId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Instructor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instructor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instructor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintModel(dAtA, i, uint64(m.Index))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.SectionId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Book) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.SectionId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x3a
	if m.MeetingId != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.MeetingId))
		i--
		dAtA[i] = 0x30
	}
	if m.SectionId != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.SectionId))
		i--
		dAtA[i] = 0x28
	}
	if m.CourseId != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.CourseId))
		i--
		dAtA[i] = 0x20
	}
	if m.SubjectId != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.SubjectId))
		i--
		dAtA[i] = 0x18
	}
	if m.UniversityId != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.UniversityId))
		i--
		dAtA[i] = 0x10
	}
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Registration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Registration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Registration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintModel(dAtA, i, uint64(m.PeriodDate))
	i--
	dAtA[i] = 0x20
	i -= len(m.Period)
	copy(dAtA[i:], m.Period)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Period)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintModel(dAtA, i, uint64(m.UniversityId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintModel(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ResolvedSemester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedSemester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedSemester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Next != nil {
		{
			size, err := m.Next.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Last != nil {
		{
			size, err := m.Last.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Current != nil {
		{
			size, err := m.Current.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Semester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Semester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Semester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.Season)
	copy(dAtA[i:], m.Season)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Season)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintModel(dAtA, i, uint64(m.Year))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *UCTNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UCTNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UCTNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.University.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModel(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintModel(dAtA, i, uint64(m.NotificationId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Meta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintModel(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != nil {
		i = encodeVarintModel(dAtA, i, uint64(*m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubscriptionView) > 0 {
		for iNdEx := len(m.SubscriptionView) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscriptionView[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Section != nil {
		{
			size, err := m.Section.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Course != nil {
		{
			size, err := m.Course.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.University != nil {
		{
			size, err := m.University.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Courses) > 0 {
		for iNdEx := len(m.Courses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Courses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Universities) > 0 {
		for iNdEx := len(m.Universities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Universities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.CreatedAt)
	copy(dAtA[i:], m.CreatedAt)
	i = encodeVarintModel(dAtA, i, uint64(len(m.CreatedAt)))
	i--
	dAtA[i] = 0x32
	i -= len(m.FcmToken)
	copy(dAtA[i:], m.FcmToken)
	i = encodeVarintModel(dAtA, i, uint64(len(m.FcmToken)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0x22
	i -= len(m.IsSubscribed)
	copy(dAtA[i:], m.IsSubscribed)
	i = encodeVarintModel(dAtA, i, uint64(len(m.IsSubscribed)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Os)
	copy(dAtA[i:], m.Os)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Os)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Id)
	copy(dAtA[i:], m.Id)
	i = encodeVarintModel(dAtA, i, uint64(len(m.Id)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubscriptionView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i--
	if m.IsHot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintModel(dAtA, i, uint64(m.Subscribers))
	i--
	dAtA[i] = 0x10
	i -= len(m.TopicName)
	copy(dAtA[i:], m.TopicName)
	i = encodeVarintModel(dAtA, i, uint64(len(m.TopicName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedUniversity(r randyModel, easy bool) *University {
	this := &University{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringModel(r))
	this.Abbr = string(randStringModel(r))
	this.HomePage = string(randStringModel(r))
	this.RegistrationPage = string(randStringModel(r))
	this.MainColor = string(randStringModel(r))
	this.AccentColor = string(randStringModel(r))
	this.TopicName = string(randStringModel(r))
	this.TopicId = string(randStringModel(r))
	if r.Intn(5) != 0 {
		this.ResolvedSemesters = NewPopulatedResolvedSemester(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Subjects = make([]*Subject, v1)
		for i := 0; i < v1; i++ {
			this.Subjects[i] = NewPopulatedSubject(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.AvailableSemesters = make([]*Semester, v2)
		for i := 0; i < v2; i++ {
			this.AvailableSemesters[i] = NewPopulatedSemester(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Registrations = make([]*Registration, v3)
		for i := 0; i < v3; i++ {
			this.Registrations[i] = NewPopulatedRegistration(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Metadata = make([]*Metadata, v4)
		for i := 0; i < v4; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 15)
	}
	return this
}

func NewPopulatedSubject(r randyModel, easy bool) *Subject {
	this := &Subject{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.UniversityId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UniversityId *= -1
	}
	this.Name = string(randStringModel(r))
	this.Number = string(randStringModel(r))
	this.Season = string(randStringModel(r))
	this.Year = string(randStringModel(r))
	this.TopicName = string(randStringModel(r))
	this.TopicId = string(randStringModel(r))
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Courses = make([]*Course, v5)
		for i := 0; i < v5; i++ {
			this.Courses[i] = NewPopulatedCourse(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Metadata = make([]*Metadata, v6)
		for i := 0; i < v6; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 11)
	}
	return this
}

func NewPopulatedCourse(r randyModel, easy bool) *Course {
	this := &Course{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SubjectId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SubjectId *= -1
	}
	this.Name = string(randStringModel(r))
	this.Number = string(randStringModel(r))
	if r.Intn(5) != 0 {
		v7 := string(randStringModel(r))
		this.Synopsis = &v7
	}
	this.TopicName = string(randStringModel(r))
	this.TopicId = string(randStringModel(r))
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Sections = make([]*Section, v8)
		for i := 0; i < v8; i++ {
			this.Sections[i] = NewPopulatedSection(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Metadata = make([]*Metadata, v9)
		for i := 0; i < v9; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 10)
	}
	return this
}

func NewPopulatedSection(r randyModel, easy bool) *Section {
	this := &Section{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CourseId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CourseId *= -1
	}
	this.Number = string(randStringModel(r))
	this.CallNumber = string(randStringModel(r))
	this.Max = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Max *= -1
	}
	this.Now = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Now *= -1
	}
	this.Status = string(randStringModel(r))
	this.Credits = string(randStringModel(r))
	this.TopicName = string(randStringModel(r))
	this.TopicId = string(randStringModel(r))
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.Meetings = make([]*Meeting, v10)
		for i := 0; i < v10; i++ {
			this.Meetings[i] = NewPopulatedMeeting(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Instructors = make([]*Instructor, v11)
		for i := 0; i < v11; i++ {
			this.Instructors[i] = NewPopulatedInstructor(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Books = make([]*Book, v12)
		for i := 0; i < v12; i++ {
			this.Books[i] = NewPopulatedBook(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.Metadata = make([]*Metadata, v13)
		for i := 0; i < v13; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 15)
	}
	return this
}

func NewPopulatedMeeting(r randyModel, easy bool) *Meeting {
	this := &Meeting{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	if r.Intn(5) != 0 {
		v14 := string(randStringModel(r))
		this.Room = &v14
	}
	if r.Intn(5) != 0 {
		v15 := string(randStringModel(r))
		this.Day = &v15
	}
	if r.Intn(5) != 0 {
		v16 := string(randStringModel(r))
		this.StartTime = &v16
	}
	if r.Intn(5) != 0 {
		v17 := string(randStringModel(r))
		this.EndTime = &v17
	}
	if r.Intn(5) != 0 {
		v18 := string(randStringModel(r))
		this.ClassType = &v18
	}
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	if r.Intn(5) != 0 {
		v19 := r.Intn(5)
		this.Metadata = make([]*Metadata, v19)
		for i := 0; i < v19; i++ {
			this.Metadata[i] = NewPopulatedMetadata(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 10)
	}
	return this
}

func NewPopulatedInstructor(r randyModel, easy bool) *Instructor {
	this := &Instructor{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	this.Name = string(randStringModel(r))
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedBook(r randyModel, easy bool) *Book {
	this := &Book{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SectionId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SectionId *= -1
	}
	this.Title = string(randStringModel(r))
	this.Url = string(randStringModel(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedMetadata(r randyModel, easy bool) *Metadata {
	this := &Metadata{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if r.Intn(5) != 0 {
		v20 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.UniversityId = &v20
	}
	if r.Intn(5) != 0 {
		v21 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.SubjectId = &v21
	}
	if r.Intn(5) != 0 {
		v22 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v22 *= -1
		}
		this.CourseId = &v22
	}
	if r.Intn(5) != 0 {
		v23 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		this.SectionId = &v23
	}
	if r.Intn(5) != 0 {
		v24 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		this.MeetingId = &v24
	}
	this.Title = string(randStringModel(r))
	this.Content = string(randStringModel(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 9)
	}
	return this
}

func NewPopulatedRegistration(r randyModel, easy bool) *Registration {
	this := &Registration{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.UniversityId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UniversityId *= -1
	}
	this.Period = string(randStringModel(r))
	this.PeriodDate = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.PeriodDate *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedResolvedSemester(r randyModel, easy bool) *ResolvedSemester {
	this := &ResolvedSemester{}
	if r.Intn(5) != 0 {
		this.Current = NewPopulatedSemester(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Last = NewPopulatedSemester(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Next = NewPopulatedSemester(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 4)
	}
	return this
}

func NewPopulatedSemester(r randyModel, easy bool) *Semester {
	this := &Semester{}
	this.Year = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Year *= -1
	}
	this.Season = string(randStringModel(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedUCTNotification(r randyModel, easy bool) *UCTNotification {
	this := &UCTNotification{}
	this.NotificationId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NotificationId *= -1
	}
	this.TopicName = string(randStringModel(r))
	this.Status = string(randStringModel(r))
	v25 := NewPopulatedUniversity(r, easy)
	this.University = *v25
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 5)
	}
	return this
}

func NewPopulatedResponse(r randyModel, easy bool) *Response {
	this := &Response{}
	if r.Intn(5) != 0 {
		this.Meta = NewPopulatedMeta(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Data = NewPopulatedData(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedMeta(r randyModel, easy bool) *Meta {
	this := &Meta{}
	if r.Intn(5) != 0 {
		v26 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		this.Code = &v26
	}
	if r.Intn(5) != 0 {
		v27 := string(randStringModel(r))
		this.Message = &v27
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 3)
	}
	return this
}

func NewPopulatedData(r randyModel, easy bool) *Data {
	this := &Data{}
	if r.Intn(5) != 0 {
		v28 := r.Intn(5)
		this.Universities = make([]*University, v28)
		for i := 0; i < v28; i++ {
			this.Universities[i] = NewPopulatedUniversity(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v29 := r.Intn(5)
		this.Subjects = make([]*Subject, v29)
		for i := 0; i < v29; i++ {
			this.Subjects[i] = NewPopulatedSubject(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v30 := r.Intn(5)
		this.Courses = make([]*Course, v30)
		for i := 0; i < v30; i++ {
			this.Courses[i] = NewPopulatedCourse(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v31 := r.Intn(5)
		this.Sections = make([]*Section, v31)
		for i := 0; i < v31; i++ {
			this.Sections[i] = NewPopulatedSection(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.University = NewPopulatedUniversity(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Subject = NewPopulatedSubject(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Course = NewPopulatedCourse(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Section = NewPopulatedSection(r, easy)
	}
	if r.Intn(5) != 0 {
		v32 := r.Intn(5)
		this.SubscriptionView = make([]*SubscriptionView, v32)
		for i := 0; i < v32; i++ {
			this.SubscriptionView[i] = NewPopulatedSubscriptionView(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 10)
	}
	return this
}

func NewPopulatedSubscription(r randyModel, easy bool) *Subscription {
	this := &Subscription{}
	this.Id = string(randStringModel(r))
	this.Os = string(randStringModel(r))
	this.IsSubscribed = string(randStringModel(r))
	this.TopicName = string(randStringModel(r))
	this.FcmToken = string(randStringModel(r))
	this.CreatedAt = string(randStringModel(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 7)
	}
	return this
}

func NewPopulatedSubscriptionView(r randyModel, easy bool) *SubscriptionView {
	this := &SubscriptionView{}
	this.TopicName = string(randStringModel(r))
	this.Subscribers = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Subscribers *= -1
	}
	this.IsHot = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedModel(r, 4)
	}
	return this
}

type randyModel interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneModel(r randyModel) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringModel(r randyModel) string {
	v33 := r.Intn(100)
	tmps := make([]rune, v33)
	for i := 0; i < v33; i++ {
		tmps[i] = randUTF8RuneModel(r)
	}
	return string(tmps)
}
func randUnrecognizedModel(r randyModel, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldModel(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldModel(dAtA []byte, r randyModel, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		v34 := r.Int63()
		if r.Intn(2) == 0 {
			v34 *= -1
		}
		dAtA = encodeVarintPopulateModel(dAtA, uint64(v34))
	case 1:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateModel(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateModel(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateModel(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *University) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Abbr)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.HomePage)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.RegistrationPage)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.MainColor)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.AccentColor)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if m.ResolvedSemesters != nil {
		l = m.ResolvedSemesters.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.AvailableSemesters) > 0 {
		for _, e := range m.AvailableSemesters {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Registrations) > 0 {
		for _, e := range m.Registrations {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Subject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.UniversityId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Season)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Year)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Course) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SubjectId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	if m.Synopsis != nil {
		l = len(*m.Synopsis)
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.CourseId))
	l = len(m.Number)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.CallNumber)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.Max))
	n += 1 + sovModel(uint64(m.Now))
	l = len(m.Status)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Credits)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicId)
	n += 1 + l + sovModel(uint64(l))
	if len(m.Meetings) > 0 {
		for _, e := range m.Meetings {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Instructors) > 0 {
		for _, e := range m.Instructors {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Meeting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	if m.Room != nil {
		l = len(*m.Room)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Day != nil {
		l = len(*m.Day)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.StartTime != nil {
		l = len(*m.StartTime)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.EndTime != nil {
		l = len(*m.EndTime)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.ClassType != nil {
		l = len(*m.ClassType)
		n += 1 + l + sovModel(uint64(l))
	}
	n += 1 + sovModel(uint64(m.Index))
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Instructor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	l = len(m.Name)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.Index))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.SectionId))
	l = len(m.Title)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	if m.UniversityId != nil {
		n += 1 + sovModel(uint64(*m.UniversityId))
	}
	if m.SubjectId != nil {
		n += 1 + sovModel(uint64(*m.SubjectId))
	}
	if m.CourseId != nil {
		n += 1 + sovModel(uint64(*m.CourseId))
	}
	if m.SectionId != nil {
		n += 1 + sovModel(uint64(*m.SectionId))
	}
	if m.MeetingId != nil {
		n += 1 + sovModel(uint64(*m.MeetingId))
	}
	l = len(m.Title)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Registration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Id))
	n += 1 + sovModel(uint64(m.UniversityId))
	l = len(m.Period)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.PeriodDate))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolvedSemester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Current != nil {
		l = m.Current.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Last != nil {
		l = m.Last.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Semester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.Year))
	l = len(m.Season)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UCTNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovModel(uint64(m.NotificationId))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovModel(uint64(l))
	l = m.University.Size()
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Meta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		n += 1 + sovModel(uint64(*m.Code))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovModel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Universities) > 0 {
		for _, e := range m.Universities {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.University != nil {
		l = m.University.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Course != nil {
		l = m.Course.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Section != nil {
		l = m.Section.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.SubscriptionView) > 0 {
		for _, e := range m.SubscriptionView {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.Os)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.IsSubscribed)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.FcmToken)
	n += 1 + l + sovModel(uint64(l))
	l = len(m.CreatedAt)
	n += 1 + l + sovModel(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscriptionView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicName)
	n += 1 + l + sovModel(uint64(l))
	n += 1 + sovModel(uint64(m.Subscribers))
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *University) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubjects := "[]*Subject{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "Subject", "Subject", 1) + ","
	}
	repeatedStringForSubjects += "}"
	repeatedStringForAvailableSemesters := "[]*Semester{"
	for _, f := range this.AvailableSemesters {
		repeatedStringForAvailableSemesters += strings.Replace(f.String(), "Semester", "Semester", 1) + ","
	}
	repeatedStringForAvailableSemesters += "}"
	repeatedStringForRegistrations := "[]*Registration{"
	for _, f := range this.Registrations {
		repeatedStringForRegistrations += strings.Replace(f.String(), "Registration", "Registration", 1) + ","
	}
	repeatedStringForRegistrations += "}"
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&University{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Abbr:` + fmt.Sprintf("%v", this.Abbr) + `,`,
		`HomePage:` + fmt.Sprintf("%v", this.HomePage) + `,`,
		`RegistrationPage:` + fmt.Sprintf("%v", this.RegistrationPage) + `,`,
		`MainColor:` + fmt.Sprintf("%v", this.MainColor) + `,`,
		`AccentColor:` + fmt.Sprintf("%v", this.AccentColor) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`ResolvedSemesters:` + strings.Replace(this.ResolvedSemesters.String(), "ResolvedSemester", "ResolvedSemester", 1) + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`AvailableSemesters:` + repeatedStringForAvailableSemesters + `,`,
		`Registrations:` + repeatedStringForRegistrations + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCourses := "[]*Course{"
	for _, f := range this.Courses {
		repeatedStringForCourses += strings.Replace(f.String(), "Course", "Course", 1) + ","
	}
	repeatedStringForCourses += "}"
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Subject{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + fmt.Sprintf("%v", this.UniversityId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Season:` + fmt.Sprintf("%v", this.Season) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Courses:` + repeatedStringForCourses + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Course) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSections := "[]*Section{"
	for _, f := range this.Sections {
		repeatedStringForSections += strings.Replace(f.String(), "Section", "Section", 1) + ","
	}
	repeatedStringForSections += "}"
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Course{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SubjectId:` + fmt.Sprintf("%v", this.SubjectId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Synopsis:` + valueToStringModel(this.Synopsis) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Sections:` + repeatedStringForSections + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Section) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMeetings := "[]*Meeting{"
	for _, f := range this.Meetings {
		repeatedStringForMeetings += strings.Replace(f.String(), "Meeting", "Meeting", 1) + ","
	}
	repeatedStringForMeetings += "}"
	repeatedStringForInstructors := "[]*Instructor{"
	for _, f := range this.Instructors {
		repeatedStringForInstructors += strings.Replace(f.String(), "Instructor", "Instructor", 1) + ","
	}
	repeatedStringForInstructors += "}"
	repeatedStringForBooks := "[]*Book{"
	for _, f := range this.Books {
		repeatedStringForBooks += strings.Replace(f.String(), "Book", "Book", 1) + ","
	}
	repeatedStringForBooks += "}"
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Section{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`CallNumber:` + fmt.Sprintf("%v", this.CallNumber) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`Now:` + fmt.Sprintf("%v", this.Now) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Credits:` + fmt.Sprintf("%v", this.Credits) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Meetings:` + repeatedStringForMeetings + `,`,
		`Instructors:` + repeatedStringForInstructors + `,`,
		`Books:` + repeatedStringForBooks + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Meeting) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadata := "[]*Metadata{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(f.String(), "Metadata", "Metadata", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Meeting{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Room:` + valueToStringModel(this.Room) + `,`,
		`Day:` + valueToStringModel(this.Day) + `,`,
		`StartTime:` + valueToStringModel(this.StartTime) + `,`,
		`EndTime:` + valueToStringModel(this.EndTime) + `,`,
		`ClassType:` + valueToStringModel(this.ClassType) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Instructor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Instructor{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Book) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Book{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SectionId:` + fmt.Sprintf("%v", this.SectionId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + valueToStringModel(this.UniversityId) + `,`,
		`SubjectId:` + valueToStringModel(this.SubjectId) + `,`,
		`CourseId:` + valueToStringModel(this.CourseId) + `,`,
		`SectionId:` + valueToStringModel(this.SectionId) + `,`,
		`MeetingId:` + valueToStringModel(this.MeetingId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Registration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Registration{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UniversityId:` + fmt.Sprintf("%v", this.UniversityId) + `,`,
		`Period:` + fmt.Sprintf("%v", this.Period) + `,`,
		`PeriodDate:` + fmt.Sprintf("%v", this.PeriodDate) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolvedSemester) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolvedSemester{`,
		`Current:` + strings.Replace(this.Current.String(), "Semester", "Semester", 1) + `,`,
		`Last:` + strings.Replace(this.Last.String(), "Semester", "Semester", 1) + `,`,
		`Next:` + strings.Replace(this.Next.String(), "Semester", "Semester", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Semester) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Semester{`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Season:` + fmt.Sprintf("%v", this.Season) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UCTNotification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UCTNotification{`,
		`NotificationId:` + fmt.Sprintf("%v", this.NotificationId) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`University:` + strings.Replace(strings.Replace(this.University.String(), "University", "University", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Meta:` + strings.Replace(this.Meta.String(), "Meta", "Meta", 1) + `,`,
		`Data:` + strings.Replace(this.Data.String(), "Data", "Data", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Meta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Meta{`,
		`Code:` + valueToStringModel(this.Code) + `,`,
		`Message:` + valueToStringModel(this.Message) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUniversities := "[]*University{"
	for _, f := range this.Universities {
		repeatedStringForUniversities += strings.Replace(f.String(), "University", "University", 1) + ","
	}
	repeatedStringForUniversities += "}"
	repeatedStringForSubjects := "[]*Subject{"
	for _, f := range this.Subjects {
		repeatedStringForSubjects += strings.Replace(f.String(), "Subject", "Subject", 1) + ","
	}
	repeatedStringForSubjects += "}"
	repeatedStringForCourses := "[]*Course{"
	for _, f := range this.Courses {
		repeatedStringForCourses += strings.Replace(f.String(), "Course", "Course", 1) + ","
	}
	repeatedStringForCourses += "}"
	repeatedStringForSections := "[]*Section{"
	for _, f := range this.Sections {
		repeatedStringForSections += strings.Replace(f.String(), "Section", "Section", 1) + ","
	}
	repeatedStringForSections += "}"
	repeatedStringForSubscriptionView := "[]*SubscriptionView{"
	for _, f := range this.SubscriptionView {
		repeatedStringForSubscriptionView += strings.Replace(f.String(), "SubscriptionView", "SubscriptionView", 1) + ","
	}
	repeatedStringForSubscriptionView += "}"
	s := strings.Join([]string{`&Data{`,
		`Universities:` + repeatedStringForUniversities + `,`,
		`Subjects:` + repeatedStringForSubjects + `,`,
		`Courses:` + repeatedStringForCourses + `,`,
		`Sections:` + repeatedStringForSections + `,`,
		`University:` + strings.Replace(this.University.String(), "University", "University", 1) + `,`,
		`Subject:` + strings.Replace(this.Subject.String(), "Subject", "Subject", 1) + `,`,
		`Course:` + strings.Replace(this.Course.String(), "Course", "Course", 1) + `,`,
		`Section:` + strings.Replace(this.Section.String(), "Section", "Section", 1) + `,`,
		`SubscriptionView:` + repeatedStringForSubscriptionView + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subscription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subscription{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`IsSubscribed:` + fmt.Sprintf("%v", this.IsSubscribed) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`FcmToken:` + fmt.Sprintf("%v", this.FcmToken) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscriptionView) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscriptionView{`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`Subscribers:` + fmt.Sprintf("%v", this.Subscribers) + `,`,
		`IsHot:` + fmt.Sprintf("%v", this.IsHot) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *University) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: University: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: University: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abbr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abbr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccentColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccentColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedSemesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResolvedSemesters == nil {
				m.ResolvedSemesters = &ResolvedSemester{}
			}
			if err := m.ResolvedSemesters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableSemesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableSemesters = append(m.AvailableSemesters, &Semester{})
			if err := m.AvailableSemesters[len(m.AvailableSemesters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrations = append(m.Registrations, &Registration{})
			if err := m.Registrations[len(m.Registrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			m.UniversityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniversityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Season = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Course) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			m.SubjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubjectId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synopsis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Synopsis = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			m.CourseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meetings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meetings = append(m.Meetings, &Meeting{})
			if err := m.Meetings[len(m.Meetings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructors = append(m.Instructors, &Instructor{})
			if err := m.Instructors[len(m.Instructors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meeting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meeting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meeting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Room = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Day = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StartTime = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EndTime = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClassType = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instructor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instructor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instructor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			m.SectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniversityId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubjectId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CourseId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SectionId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeetingId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MeetingId = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Registration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Registration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Registration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversityId", wireType)
			}
			m.UniversityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniversityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodDate", wireType)
			}
			m.PeriodDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedSemester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedSemester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedSemester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Current == nil {
				m.Current = &Semester{}
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Last == nil {
				m.Last = &Semester{}
			}
			if err := m.Last.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &Semester{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Semester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Semester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Semester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Season = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UCTNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UCTNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UCTNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationId", wireType)
			}
			m.NotificationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.University.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Universities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Universities = append(m.Universities, &University{})
			if err := m.Universities[len(m.Universities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.University == nil {
				m.University = &University{}
			}
			if err := m.University.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Course", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Course == nil {
				m.Course = &Course{}
			}
			if err := m.Course.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Section == nil {
				m.Section = &Section{}
			}
			if err := m.Section.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionView = append(m.SubscriptionView, &SubscriptionView{})
			if err := m.SubscriptionView[len(m.SubscriptionView)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSubscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsSubscribed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FcmToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FcmToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			m.Subscribers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subscribers |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthModel
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)
